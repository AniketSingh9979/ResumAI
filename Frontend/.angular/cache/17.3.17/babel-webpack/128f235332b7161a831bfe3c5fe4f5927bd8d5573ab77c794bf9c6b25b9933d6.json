{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class InterviewService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api';\n  }\n  // Get available domains\n  getAvailableDomains() {\n    return this.http.get(`${this.apiUrl}/questions/domains`);\n  }\n  // Get interview configuration based on experience\n  getInterviewConfiguration(experience) {\n    return this.http.get(`${this.apiUrl}/questions/configuration`, {\n      params: {\n        experience: experience.toString()\n      }\n    });\n  }\n  // Check interview availability\n  checkInterviewAvailability(domain, experience) {\n    return this.http.get(`${this.apiUrl}/interview/availability`, {\n      params: {\n        domain: domain,\n        experience: experience.toString()\n      }\n    });\n  }\n  // Get coding questions\n  getCodingQuestions(domain, experience, count = 3) {\n    return this.http.get(`${this.apiUrl}/interview/coding-questions`, {\n      params: {\n        domain: domain,\n        experience: experience.toString(),\n        count: count.toString()\n      }\n    });\n  }\n  // Get MCQ questions  \n  getMCQQuestions(domain, experience, count = 5) {\n    return this.http.get(`${this.apiUrl}/interview/mcq-questions`, {\n      params: {\n        domain: domain,\n        experience: experience.toString(),\n        count: count.toString()\n      }\n    });\n  }\n  // Get subjective questions for Q&A section\n  getSubjectiveQuestions(domain, count = 4) {\n    return this.http.get(`${this.apiUrl}/interview/subjective-questions`, {\n      params: {\n        domain: domain,\n        count: count.toString()\n      }\n    });\n  }\n  // Get complete question set for interview\n  getCompleteQuestionSet(domain, experience) {\n    return this.http.get(`${this.apiUrl}/questions/complete-set`, {\n      params: {\n        domain: domain,\n        experience: experience.toString()\n      }\n    });\n  }\n  // Send Q&A response for evaluation\n  sendChatResponse(request) {\n    return this.http.post(`${this.apiUrl}/chat/respond`, request);\n  }\n  // Get chat history for a candidate\n  getChatHistory(resumeId) {\n    return this.http.get(`${this.apiUrl}/chat/history/${resumeId}`);\n  }\n  // Submit complete interview\n  submitInterview(submission) {\n    return this.http.post(`${this.apiUrl}/chat/submitInterview`, submission);\n  }\n  // Utility methods for session management\n  setCandidateInfo(info) {\n    sessionStorage.setItem('candidateInfo', JSON.stringify(info));\n  }\n  getCandidateInfo() {\n    const info = sessionStorage.getItem('candidateInfo');\n    return info ? JSON.parse(info) : null;\n  }\n  generateResumeId() {\n    return 'RES_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n  // Convert MCQ options string to array\n  parseOptions(optionsString) {\n    try {\n      // Try to parse as JSON first\n      return JSON.parse(optionsString);\n    } catch {\n      // Fall back to comma-separated parsing\n      return optionsString.split(',').map(opt => opt.trim());\n    }\n  }\n  // Calculate scores for different sections\n  calculateMCQScore(answers, questions) {\n    if (questions.length === 0) return 0;\n    let correctCount = 0;\n    answers.forEach(answer => {\n      const question = questions.find(q => q.id === answer.questionId);\n      if (question) {\n        // Note: Actual scoring would need the correct answers from backend\n        // This is a placeholder implementation\n        correctCount++; // Simplified for demo\n      }\n    });\n    return Math.round(correctCount / questions.length * 100);\n  }\n  // Format time remaining\n  formatTime(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n  // Get experience level display text\n  getExperienceLevel(years) {\n    if (years <= 1) return 'Fresher';\n    if (years <= 3) return 'Junior';\n    if (years <= 6) return 'Mid-level';\n    return 'Senior';\n  }\n  static {\n    this.ɵfac = function InterviewService_Factory(t) {\n      return new (t || InterviewService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InterviewService,\n      factory: InterviewService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["InterviewService","constructor","http","apiUrl","getAvailableDomains","get","getInterviewConfiguration","experience","params","toString","checkInterviewAvailability","domain","getCodingQuestions","count","getMCQQuestions","getSubjectiveQuestions","getCompleteQuestionSet","sendChatResponse","request","post","getChatHistory","resumeId","submitInterview","submission","setCandidateInfo","info","sessionStorage","setItem","JSON","stringify","getCandidateInfo","getItem","parse","generateResumeId","Date","now","Math","random","substr","parseOptions","optionsString","split","map","opt","trim","calculateMCQScore","answers","questions","length","correctCount","forEach","answer","question","find","q","id","questionId","round","formatTime","seconds","minutes","floor","remainingSeconds","padStart","getExperienceLevel","years","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Frontend\\src\\app\\services\\interview.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\n// Updated interfaces to match backend models\r\nexport interface CodingQuestion {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  starterCode?: string;\r\n  domain: string;\r\n  difficulty: string;\r\n  experienceLevel: string;\r\n  tags?: string;\r\n}\r\n\r\nexport interface MCQQuestion {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  options: string;\r\n  questionType: string;\r\n  domain: string;\r\n  multipleSelection: boolean;\r\n  difficulty: string;\r\n}\r\n\r\nexport interface SubjectiveQuestion {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  domain: string;\r\n  difficulty: string;\r\n  questionType: string;\r\n  expectedAnswer?: string; // Not exposed to frontend, used for similarity comparison\r\n}\r\n\r\nexport interface ChatRequest {\r\n  question: string;\r\n  resumeId: string;\r\n  domain: string;\r\n  expectedAnswer?: string;\r\n  questionType?: string;\r\n}\r\n\r\nexport interface ChatResponse {\r\n  botResponse: string;\r\n  similarity?: number;\r\n  correct?: boolean;\r\n  messageId: string;\r\n  timestamp: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface MCQAnswer {\r\n  questionId: string;\r\n  selectedOptions: string[];\r\n}\r\n\r\nexport interface CandidateInfo {\r\n  name: string;\r\n  email: string;\r\n  domain: string;\r\n  experience: number;\r\n}\r\n\r\nexport interface InterviewConfiguration {\r\n  codingQuestions: number;\r\n  mcqQuestions: number;\r\n  subjectiveQuestions: number;\r\n  timeLimit: number;\r\n  difficultyFocus: string;\r\n  description?: string;\r\n}\r\n\r\nexport interface InterviewAvailability {\r\n  domain: string;\r\n  experienceLevel: string;\r\n  codingQuestions: number;\r\n  mcqQuestions: number;\r\n  subjectiveQuestions: number;\r\n  isAvailable: boolean;\r\n  message?: string;\r\n}\r\n\r\nexport interface InterviewSubmission {\r\n  resumeId: string;\r\n  candidateName: string;\r\n  candidateEmail?: string;\r\n  domain: string;\r\n  experienceLevel: string;\r\n  totalQuestions: number;\r\n  codingQuestions: number;\r\n  mcqQuestions: number;\r\n  subjectiveQuestions: number;\r\n  correctAnswers: number;\r\n  scorePercentage: number;\r\n  codingScore?: number;\r\n  mcqScore?: number;\r\n  subjectiveScore?: number;\r\n  feedbackSummary?: string;\r\n  interviewDuration?: number;\r\n  completedOnTime?: boolean;\r\n  status: string;\r\n  notes?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InterviewService {\r\n  private apiUrl = 'http://localhost:8080/api';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get available domains\r\n  getAvailableDomains(): Observable<string[]> {\r\n    return this.http.get<string[]>(`${this.apiUrl}/questions/domains`);\r\n  }\r\n\r\n  // Get interview configuration based on experience\r\n  getInterviewConfiguration(experience: number): Observable<InterviewConfiguration> {\r\n    return this.http.get<InterviewConfiguration>(`${this.apiUrl}/questions/configuration`, {\r\n      params: { experience: experience.toString() }\r\n    });\r\n  }\r\n\r\n  // Check interview availability\r\n  checkInterviewAvailability(domain: string, experience: number): Observable<InterviewAvailability> {\r\n    return this.http.get<InterviewAvailability>(`${this.apiUrl}/interview/availability`, {\r\n      params: { \r\n        domain: domain,\r\n        experience: experience.toString()\r\n      }\r\n    });\r\n  }\r\n\r\n  // Get coding questions\r\n  getCodingQuestions(domain: string, experience: number, count: number = 3): Observable<CodingQuestion[]> {\r\n    return this.http.get<CodingQuestion[]>(`${this.apiUrl}/interview/coding-questions`, {\r\n      params: {\r\n        domain: domain,\r\n        experience: experience.toString(),\r\n        count: count.toString()\r\n      }\r\n    });\r\n  }\r\n\r\n  // Get MCQ questions  \r\n  getMCQQuestions(domain: string, experience: number, count: number = 5): Observable<MCQQuestion[]> {\r\n    return this.http.get<MCQQuestion[]>(`${this.apiUrl}/interview/mcq-questions`, {\r\n      params: {\r\n        domain: domain,\r\n        experience: experience.toString(),\r\n        count: count.toString()\r\n      }\r\n    });\r\n  }\r\n\r\n  // Get subjective questions for Q&A section\r\n  getSubjectiveQuestions(domain: string, count: number = 4): Observable<SubjectiveQuestion[]> {\r\n    return this.http.get<SubjectiveQuestion[]>(`${this.apiUrl}/interview/subjective-questions`, {\r\n      params: {\r\n        domain: domain,\r\n        count: count.toString()\r\n      }\r\n    });\r\n  }\r\n\r\n  // Get complete question set for interview\r\n  getCompleteQuestionSet(domain: string, experience: number): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/questions/complete-set`, {\r\n      params: {\r\n        domain: domain,\r\n        experience: experience.toString()\r\n      }\r\n    });\r\n  }\r\n\r\n  // Send Q&A response for evaluation\r\n  sendChatResponse(request: ChatRequest): Observable<ChatResponse> {\r\n    return this.http.post<ChatResponse>(`${this.apiUrl}/chat/respond`, request);\r\n  }\r\n\r\n  // Get chat history for a candidate\r\n  getChatHistory(resumeId: string): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/chat/history/${resumeId}`);\r\n  }\r\n\r\n  // Submit complete interview\r\n  submitInterview(submission: InterviewSubmission): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/chat/submitInterview`, submission);\r\n  }\r\n\r\n  // Utility methods for session management\r\n  setCandidateInfo(info: CandidateInfo): void {\r\n    sessionStorage.setItem('candidateInfo', JSON.stringify(info));\r\n  }\r\n\r\n  getCandidateInfo(): CandidateInfo | null {\r\n    const info = sessionStorage.getItem('candidateInfo');\r\n    return info ? JSON.parse(info) : null;\r\n  }\r\n\r\n  generateResumeId(): string {\r\n    return 'RES_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  // Convert MCQ options string to array\r\n  parseOptions(optionsString: string): string[] {\r\n    try {\r\n      // Try to parse as JSON first\r\n      return JSON.parse(optionsString);\r\n    } catch {\r\n      // Fall back to comma-separated parsing\r\n      return optionsString.split(',').map(opt => opt.trim());\r\n    }\r\n  }\r\n\r\n  // Calculate scores for different sections\r\n  calculateMCQScore(answers: MCQAnswer[], questions: MCQQuestion[]): number {\r\n    if (questions.length === 0) return 0;\r\n    \r\n    let correctCount = 0;\r\n    answers.forEach(answer => {\r\n      const question = questions.find(q => q.id === answer.questionId);\r\n      if (question) {\r\n        // Note: Actual scoring would need the correct answers from backend\r\n        // This is a placeholder implementation\r\n        correctCount++; // Simplified for demo\r\n      }\r\n    });\r\n    \r\n    return Math.round((correctCount / questions.length) * 100);\r\n  }\r\n\r\n  // Format time remaining\r\n  formatTime(seconds: number): string {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n  }\r\n\r\n  // Get experience level display text\r\n  getExperienceLevel(years: number): string {\r\n    if (years <= 1) return 'Fresher';\r\n    if (years <= 3) return 'Junior';\r\n    if (years <= 6) return 'Mid-level';\r\n    return 'Senior';\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}