{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction SubjectiveQAComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 5)(4, \"label\", 6);\n    i0.ɵɵtext(5, \"Your Answer:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"textarea\", 7);\n    i0.ɵɵtext(7, \"      \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 8)(9, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function SubjectiveQAComponent_div_1_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.clearAnswer());\n    });\n    i0.ɵɵelement(10, \"i\", 10);\n    i0.ɵɵtext(11, \" Clear Answer \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    let tmp_1_0;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", (tmp_1_0 = ctx_r1.getCurrentQuestion()) == null ? null : tmp_1_0.question, \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formControl\", ctx_r1.answerControl);\n  }\n}\nfunction SubjectiveQAComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"div\", 12);\n    i0.ɵɵelement(2, \"i\", 13);\n    i0.ɵɵelementStart(3, \"h3\");\n    i0.ɵɵtext(4, \"No Questions Available\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6, \"Please check back later or contact support.\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nexport let SubjectiveQAComponent = /*#__PURE__*/(() => {\n  class SubjectiveQAComponent {\n    constructor() {\n      this.domain = '';\n      this.resumeId = '';\n      this.currentQuestionIndex = 0;\n      this.answersUpdate = new EventEmitter();\n      this.questions = [];\n      this.answerControl = new FormControl('');\n      this.answers = [];\n    }\n    ngOnInit() {\n      this.loadQuestions();\n      this.setupAnswerControl();\n    }\n    ngOnChanges() {\n      // When question index changes, update the answer control\n      this.updateAnswerControl();\n    }\n    loadQuestions() {\n      // Simple demo questions - in real app, fetch from backend\n      this.questions = [{\n        id: 'subj_1',\n        question: 'Explain the difference between synchronous and asynchronous programming. Provide examples of when you would use each approach.',\n        domain: this.domain || 'Software Development',\n        experienceLevel: 'intermediate'\n      }, {\n        id: 'subj_2',\n        question: 'Describe your experience with database optimization. What techniques have you used to improve query performance?',\n        domain: this.domain || 'Software Development',\n        experienceLevel: 'intermediate'\n      }, {\n        id: 'subj_3',\n        question: 'How do you approach debugging a complex issue in a production environment? Walk through your process.',\n        domain: this.domain || 'Software Development',\n        experienceLevel: 'intermediate'\n      }, {\n        id: 'subj_4',\n        question: 'Explain the concept of microservices architecture. What are the benefits and challenges of implementing microservices?',\n        domain: this.domain || 'Software Development',\n        experienceLevel: 'senior'\n      }];\n    }\n    setupAnswerControl() {\n      this.answerControl.valueChanges.subscribe(value => {\n        this.saveCurrentAnswer(value || '');\n      });\n    }\n    updateAnswerControl() {\n      const currentQuestion = this.getCurrentQuestion();\n      if (currentQuestion) {\n        const existingAnswer = this.answers.find(a => a.questionId === currentQuestion.id);\n        this.answerControl.setValue(existingAnswer?.answer || '', {\n          emitEvent: false\n        });\n      }\n    }\n    getCurrentQuestion() {\n      return this.questions[this.currentQuestionIndex] || null;\n    }\n    saveCurrentAnswer(answer) {\n      const currentQuestion = this.getCurrentQuestion();\n      if (currentQuestion) {\n        const existingIndex = this.answers.findIndex(a => a.questionId === currentQuestion.id);\n        const answerData = {\n          questionId: currentQuestion.id,\n          answer: answer\n        };\n        if (existingIndex >= 0) {\n          this.answers[existingIndex] = answerData;\n        } else {\n          this.answers.push(answerData);\n        }\n        this.answersUpdate.emit(this.answers);\n      }\n    }\n    clearAnswer() {\n      this.answerControl.setValue('');\n    }\n    getAnsweredCount() {\n      return this.answers.filter(a => a.answer.trim().length > 0).length;\n    }\n    getTotalQuestions() {\n      return this.questions.length;\n    }\n    static {\n      this.ɵfac = function SubjectiveQAComponent_Factory(t) {\n        return new (t || SubjectiveQAComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: SubjectiveQAComponent,\n        selectors: [[\"app-subjective-qa\"]],\n        inputs: {\n          domain: \"domain\",\n          resumeId: \"resumeId\",\n          currentQuestionIndex: \"currentQuestionIndex\"\n        },\n        outputs: {\n          answersUpdate: \"answersUpdate\"\n        },\n        standalone: true,\n        features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n        decls: 3,\n        vars: 2,\n        consts: [[1, \"subjective-qa-container\"], [\"class\", \"question-display\", 4, \"ngIf\"], [\"class\", \"no-questions\", 4, \"ngIf\"], [1, \"question-display\"], [1, \"question-text\"], [1, \"answer-section\"], [\"for\", \"answer-textarea\"], [\"id\", \"answer-textarea\", \"placeholder\", \"Type your detailed answer here...\", \"rows\", \"8\", 1, \"answer-textarea\", 3, \"formControl\"], [1, \"answer-actions\"], [\"type\", \"button\", 1, \"clear-btn\", 3, \"click\"], [1, \"fas\", \"fa-times\"], [1, \"no-questions\"], [1, \"no-questions-content\"], [1, \"fas\", \"fa-question-circle\"]],\n        template: function SubjectiveQAComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵtemplate(1, SubjectiveQAComponent_div_1_Template, 12, 2, \"div\", 1)(2, SubjectiveQAComponent_div_2_Template, 7, 0, \"div\", 2);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.getCurrentQuestion());\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.getCurrentQuestion());\n          }\n        },\n        dependencies: [CommonModule, i1.NgIf, ReactiveFormsModule, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlDirective],\n        styles: [\".subjective-qa-container[_ngcontent-%COMP%]{padding:20px;background:#fff;border-radius:8px;min-height:500px;display:flex;flex-direction:column}.question-display[_ngcontent-%COMP%]{flex:1;display:flex;flex-direction:column}.question-text[_ngcontent-%COMP%]{font-size:16px;line-height:1.6;color:#333;margin-bottom:25px;padding:20px;background:#f8f9fa;border-radius:8px;border-left:4px solid #007bff}.answer-section[_ngcontent-%COMP%]{flex:1;display:flex;flex-direction:column}.answer-section[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-size:14px;font-weight:500;color:#333;margin-bottom:10px}.answer-textarea[_ngcontent-%COMP%]{flex:1;min-height:200px;padding:15px;border:1px solid #ddd;border-radius:6px;font-size:14px;line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,sans-serif;resize:vertical;background:#fafafa}.answer-textarea[_ngcontent-%COMP%]:focus{outline:none;border-color:#007bff;box-shadow:0 0 0 2px #007bff40;background:#fff}.answer-textarea[_ngcontent-%COMP%]::placeholder{color:#6c757d;font-style:italic}.answer-actions[_ngcontent-%COMP%]{margin-top:15px;display:flex;justify-content:flex-end}.clear-btn[_ngcontent-%COMP%]{display:flex;align-items:center;gap:6px;padding:8px 16px;background:#fff;border:1px solid #dc3545;color:#dc3545;border-radius:4px;cursor:pointer;font-size:13px;transition:all .2s ease}.clear-btn[_ngcontent-%COMP%]:hover{background:#dc3545;color:#fff}.clear-btn[_ngcontent-%COMP%]:active{transform:scale(.98)}.no-questions[_ngcontent-%COMP%]{flex:1;display:flex;align-items:center;justify-content:center}.no-questions-content[_ngcontent-%COMP%]{text-align:center;color:#6c757d}.no-questions-content[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:48px;margin-bottom:15px;color:#dee2e6}.no-questions-content[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin:0 0 10px;color:#495057}.no-questions-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;font-size:14px}@media (max-width: 768px){.subjective-qa-container[_ngcontent-%COMP%]{padding:15px}.question-text[_ngcontent-%COMP%]{padding:15px;font-size:15px}.answer-textarea[_ngcontent-%COMP%]{min-height:150px;padding:12px}.answer-actions[_ngcontent-%COMP%]{justify-content:center}}\"]\n      });\n    }\n  }\n  return SubjectiveQAComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}