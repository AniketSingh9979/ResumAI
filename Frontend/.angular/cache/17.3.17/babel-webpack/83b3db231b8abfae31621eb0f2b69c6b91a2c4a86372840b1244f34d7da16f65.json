{"ast":null,"code":"import _asyncToGenerator from \"C:/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormControl } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/interview.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction SubjectiveQAComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 5)(4, \"label\", 6);\n    i0.ɵɵtext(5, \"Your Answer:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"textarea\", 7);\n    i0.ɵɵtext(7, \"      \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 8)(9, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function SubjectiveQAComponent_div_1_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.clearAnswer());\n    });\n    i0.ɵɵelement(10, \"i\", 10);\n    i0.ɵɵtext(11, \" Clear Answer \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    let tmp_1_0;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", (tmp_1_0 = ctx_r1.getCurrentQuestion()) == null ? null : tmp_1_0.question, \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formControl\", ctx_r1.answerControl);\n  }\n}\nfunction SubjectiveQAComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"div\", 12);\n    i0.ɵɵelement(2, \"i\", 13);\n    i0.ɵɵelementStart(3, \"h3\");\n    i0.ɵɵtext(4, \"No Questions Available\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6, \"Please check back later or contact support.\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nexport class SubjectiveQAComponent {\n  constructor(interviewService) {\n    this.interviewService = interviewService;\n    this.domain = '';\n    this.resumeId = '';\n    this.currentQuestionIndex = 0;\n    this.answersUpdate = new EventEmitter();\n    this.questions = [];\n    this.answerControl = new FormControl('');\n    this.answers = [];\n    this.evaluationInProgress = new Set(); // Track ongoing evaluations\n  }\n  ngOnInit() {\n    this.loadQuestions();\n    this.setupAnswerControl();\n  }\n  ngOnChanges() {\n    // When question index changes, update the answer control\n    this.updateAnswerControl();\n  }\n  loadQuestions() {\n    // Simple demo questions - expected answers will be generated by AI\n    this.questions = [{\n      id: 'subj_1',\n      question: 'Explain the difference between synchronous and asynchronous programming. Provide examples of when you would use each approach.',\n      domain: this.domain || 'Software Development',\n      experienceLevel: 'intermediate'\n    }, {\n      id: 'subj_2',\n      question: 'Describe your experience with database optimization. What techniques have you used to improve query performance?',\n      domain: this.domain || 'Software Development',\n      experienceLevel: 'intermediate'\n    }, {\n      id: 'subj_3',\n      question: 'How do you approach debugging a complex issue in a production environment? Walk through your process.',\n      domain: this.domain || 'Software Development',\n      experienceLevel: 'intermediate'\n    }, {\n      id: 'subj_4',\n      question: 'Explain the concept of microservices architecture. What are the benefits and challenges of implementing microservices?',\n      domain: this.domain || 'Software Development',\n      experienceLevel: 'senior'\n    }];\n  }\n  setupAnswerControl() {\n    this.answerControl.valueChanges.pipe(debounceTime(500), distinctUntilChanged()).subscribe(value => {\n      this.saveCurrentAnswer(value || '');\n    });\n  }\n  updateAnswerControl() {\n    const currentQuestion = this.getCurrentQuestion();\n    if (currentQuestion) {\n      const existingAnswer = this.answers.find(a => a.questionId === currentQuestion.id);\n      this.answerControl.setValue(existingAnswer?.answer || '', {\n        emitEvent: false\n      });\n    }\n  }\n  getCurrentQuestion() {\n    return this.questions[this.currentQuestionIndex] || null;\n  }\n  saveCurrentAnswer(answer) {\n    const currentQuestion = this.getCurrentQuestion();\n    if (currentQuestion) {\n      const existingIndex = this.answers.findIndex(a => a.questionId === currentQuestion.id);\n      const answerData = {\n        questionId: currentQuestion.id,\n        answer: answer,\n        evaluated: false\n      };\n      if (existingIndex >= 0) {\n        // Preserve evaluation status and similarity if answer hasn't changed much\n        const existingAnswer = this.answers[existingIndex];\n        if (existingAnswer.lastEvaluatedAnswer) {\n          answerData.similarity = existingAnswer.similarity;\n          answerData.correct = existingAnswer.correct;\n          answerData.evaluated = existingAnswer.evaluated;\n          answerData.lastEvaluatedAnswer = existingAnswer.lastEvaluatedAnswer;\n        }\n        this.answers[existingIndex] = answerData;\n      } else {\n        this.answers.push(answerData);\n      }\n      this.answersUpdate.emit(this.answers);\n      // Only trigger AI evaluation if answer has changed significantly\n      this.evaluateAnswerSilently(currentQuestion, answer, existingIndex >= 0 ? existingIndex : this.answers.length - 1);\n    }\n  }\n  evaluateAnswerSilently(question, userAnswer, answerIndex) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Skip evaluation if answer is too short\n      if (!userAnswer.trim() || userAnswer.length < 10) {\n        return;\n      }\n      // Check if evaluation is already in progress for this question\n      if (_this.evaluationInProgress.has(question.id)) {\n        console.log('Evaluation already in progress for question:', question.id);\n        return;\n      }\n      // Check if this answer has already been evaluated (avoid duplicates)\n      const existingAnswer = _this.answers[answerIndex];\n      if (existingAnswer && existingAnswer.lastEvaluatedAnswer) {\n        const similarity = _this.calculateTextSimilarity(userAnswer, existingAnswer.lastEvaluatedAnswer);\n        if (similarity > 0.9) {\n          // 90% similar - don't re-evaluate\n          console.log('Answer too similar to last evaluated, skipping evaluation');\n          return;\n        }\n      }\n      // Mark evaluation as in progress\n      _this.evaluationInProgress.add(question.id);\n      try {\n        const chatRequest = {\n          questionText: question.question,\n          userAnswer: userAnswer,\n          resumeId: _this.resumeId,\n          domain: _this.domain,\n          questionType: 'SUBJECTIVE'\n        };\n        console.log('Starting AI evaluation for question:', question.id);\n        const response = yield _this.interviewService.sendChatResponse(chatRequest).toPromise();\n        if (response && answerIndex < _this.answers.length) {\n          // Update answer with AI evaluation results\n          _this.answers[answerIndex] = {\n            ..._this.answers[answerIndex],\n            similarity: response.similarity,\n            correct: response.correct,\n            evaluated: true,\n            lastEvaluatedAnswer: userAnswer // Track what was evaluated\n          };\n          console.log('AI evaluation completed. Similarity:', response.similarity);\n          // Emit updated answers for scoring calculation\n          _this.answersUpdate.emit(_this.answers);\n        }\n      } catch (error) {\n        console.error('Silent AI evaluation failed:', error);\n        // Mark as evaluated even if failed to avoid repeated attempts\n        if (answerIndex < _this.answers.length) {\n          _this.answers[answerIndex].evaluated = true;\n          _this.answers[answerIndex].lastEvaluatedAnswer = userAnswer;\n        }\n      } finally {\n        // Remove from in-progress tracking\n        _this.evaluationInProgress.delete(question.id);\n      }\n    })();\n  }\n  // Simple text similarity check to avoid re-evaluating similar answers\n  calculateTextSimilarity(text1, text2) {\n    if (!text1 || !text2) return 0;\n    const a = text1.toLowerCase().trim();\n    const b = text2.toLowerCase().trim();\n    if (a === b) return 1;\n    // Simple word-based similarity\n    const wordsA = a.split(/\\s+/);\n    const wordsB = b.split(/\\s+/);\n    const allWords = new Set([...wordsA, ...wordsB]);\n    const intersection = wordsA.filter(word => wordsB.includes(word));\n    return intersection.length / allWords.size;\n  }\n  clearAnswer() {\n    this.answerControl.setValue('');\n  }\n  getAnsweredCount() {\n    return this.answers.filter(a => a.answer.trim().length > 0).length;\n  }\n  getTotalQuestions() {\n    return this.questions.length;\n  }\n  static {\n    this.ɵfac = function SubjectiveQAComponent_Factory(t) {\n      return new (t || SubjectiveQAComponent)(i0.ɵɵdirectiveInject(i1.InterviewService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SubjectiveQAComponent,\n      selectors: [[\"app-subjective-qa\"]],\n      inputs: {\n        domain: \"domain\",\n        resumeId: \"resumeId\",\n        currentQuestionIndex: \"currentQuestionIndex\"\n      },\n      outputs: {\n        answersUpdate: \"answersUpdate\"\n      },\n      standalone: true,\n      features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n      decls: 3,\n      vars: 2,\n      consts: [[1, \"subjective-qa-container\"], [\"class\", \"question-display\", 4, \"ngIf\"], [\"class\", \"no-questions\", 4, \"ngIf\"], [1, \"question-display\"], [1, \"question-text\"], [1, \"answer-section\"], [\"for\", \"answer-textarea\"], [\"id\", \"answer-textarea\", \"placeholder\", \"Type your detailed answer here...\", \"rows\", \"8\", 1, \"answer-textarea\", 3, \"formControl\"], [1, \"answer-actions\"], [\"type\", \"button\", 1, \"clear-btn\", 3, \"click\"], [1, \"fas\", \"fa-times\"], [1, \"no-questions\"], [1, \"no-questions-content\"], [1, \"fas\", \"fa-question-circle\"]],\n      template: function SubjectiveQAComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵtemplate(1, SubjectiveQAComponent_div_1_Template, 12, 2, \"div\", 1)(2, SubjectiveQAComponent_div_2_Template, 7, 0, \"div\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.getCurrentQuestion());\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.getCurrentQuestion());\n        }\n      },\n      dependencies: [CommonModule, i2.NgIf, ReactiveFormsModule, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective],\n      styles: [\"\\n\\n.subjective-qa-container[_ngcontent-%COMP%] {\\n  padding: 20px;\\n  background: white;\\n  border-radius: 8px;\\n  min-height: 500px;\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n\\n\\n.question-display[_ngcontent-%COMP%] {\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.question-text[_ngcontent-%COMP%] {\\n  font-size: 16px;\\n  line-height: 1.6;\\n  color: #333;\\n  margin-bottom: 25px;\\n  padding: 20px;\\n  background: #f8f9fa;\\n  border-radius: 8px;\\n  border-left: 4px solid #007bff;\\n}\\n\\n\\n\\n.answer-section[_ngcontent-%COMP%] {\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.answer-section[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  font-weight: 500;\\n  color: #333;\\n  margin-bottom: 10px;\\n}\\n\\n.answer-textarea[_ngcontent-%COMP%] {\\n  flex: 1;\\n  min-height: 200px;\\n  padding: 15px;\\n  border: 1px solid #ddd;\\n  border-radius: 6px;\\n  font-size: 14px;\\n  line-height: 1.5;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\\n  resize: vertical;\\n  background: #fafafa;\\n}\\n\\n.answer-textarea[_ngcontent-%COMP%]:focus {\\n  outline: none;\\n  border-color: #007bff;\\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\\n  background: white;\\n}\\n\\n.answer-textarea[_ngcontent-%COMP%]::placeholder {\\n  color: #6c757d;\\n  font-style: italic;\\n}\\n\\n\\n\\n.answer-actions[_ngcontent-%COMP%] {\\n  margin-top: 15px;\\n  display: flex;\\n  justify-content: flex-end;\\n}\\n\\n.clear-btn[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  gap: 6px;\\n  padding: 8px 16px;\\n  background: white;\\n  border: 1px solid #dc3545;\\n  color: #dc3545;\\n  border-radius: 4px;\\n  cursor: pointer;\\n  font-size: 13px;\\n  transition: all 0.2s ease;\\n}\\n\\n.clear-btn[_ngcontent-%COMP%]:hover {\\n  background: #dc3545;\\n  color: white;\\n}\\n\\n.clear-btn[_ngcontent-%COMP%]:active {\\n  transform: scale(0.98);\\n}\\n\\n\\n\\n.no-questions[_ngcontent-%COMP%] {\\n  flex: 1;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.no-questions-content[_ngcontent-%COMP%] {\\n  text-align: center;\\n  color: #6c757d;\\n}\\n\\n.no-questions-content[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\\n  font-size: 48px;\\n  margin-bottom: 15px;\\n  color: #dee2e6;\\n}\\n\\n.no-questions-content[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  margin: 0 0 10px 0;\\n  color: #495057;\\n}\\n\\n.no-questions-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 0;\\n  font-size: 14px;\\n}\\n\\n\\n\\n\\n\\n@media (max-width: 768px) {\\n  .subjective-qa-container[_ngcontent-%COMP%] {\\n    padding: 15px;\\n  }\\n  \\n  .question-text[_ngcontent-%COMP%] {\\n    padding: 15px;\\n    font-size: 15px;\\n  }\\n  \\n  .answer-textarea[_ngcontent-%COMP%] {\\n    min-height: 150px;\\n    padding: 12px;\\n  }\\n  \\n  .answer-actions[_ngcontent-%COMP%] {\\n    justify-content: center;\\n  }\\n} \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9zdWJqZWN0aXZlLXFhL3N1YmplY3RpdmUtcWEuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0QkFBNEI7QUFDNUI7RUFDRSxhQUFhO0VBQ2IsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsYUFBYTtFQUNiLHNCQUFzQjtBQUN4Qjs7QUFFQSxxQkFBcUI7QUFDckI7RUFDRSxPQUFPO0VBQ1AsYUFBYTtFQUNiLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEIsV0FBVztFQUNYLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQiw4QkFBOEI7QUFDaEM7O0FBRUEsbUJBQW1CO0FBQ25CO0VBQ0UsT0FBTztFQUNQLGFBQWE7RUFDYixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLFdBQVc7RUFDWCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxPQUFPO0VBQ1AsaUJBQWlCO0VBQ2pCLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEIsOEVBQThFO0VBQzlFLGdCQUFnQjtFQUNoQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IscUJBQXFCO0VBQ3JCLDZDQUE2QztFQUM3QyxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxjQUFjO0VBQ2Qsa0JBQWtCO0FBQ3BCOztBQUVBLG1CQUFtQjtBQUNuQjtFQUNFLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2IseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixRQUFRO0VBQ1IsaUJBQWlCO0VBQ2pCLGlCQUFpQjtFQUNqQix5QkFBeUI7RUFDekIsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixlQUFlO0VBQ2YsZUFBZTtFQUNmLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUEsdUJBQXVCO0FBQ3ZCO0VBQ0UsT0FBTztFQUNQLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsbUJBQW1CO0VBQ25CLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsY0FBYztBQUNoQjs7QUFFQTtFQUNFLFNBQVM7RUFDVCxlQUFlO0FBQ2pCOzs7O0FBSUEsc0JBQXNCO0FBQ3RCO0VBQ0U7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxhQUFhO0lBQ2IsZUFBZTtFQUNqQjs7RUFFQTtJQUNFLGlCQUFpQjtJQUNqQixhQUFhO0VBQ2Y7O0VBRUE7SUFDRSx1QkFBdUI7RUFDekI7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qIFN1YmplY3RpdmUgUUEgQ29udGFpbmVyICovXHJcbi5zdWJqZWN0aXZlLXFhLWNvbnRhaW5lciB7XHJcbiAgcGFkZGluZzogMjBweDtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgbWluLWhlaWdodDogNTAwcHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG59XHJcblxyXG4vKiBRdWVzdGlvbiBEaXNwbGF5ICovXHJcbi5xdWVzdGlvbi1kaXNwbGF5IHtcclxuICBmbGV4OiAxO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxufVxyXG5cclxuLnF1ZXN0aW9uLXRleHQge1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBsaW5lLWhlaWdodDogMS42O1xyXG4gIGNvbG9yOiAjMzMzO1xyXG4gIG1hcmdpbi1ib3R0b206IDI1cHg7XHJcbiAgcGFkZGluZzogMjBweDtcclxuICBiYWNrZ3JvdW5kOiAjZjhmOWZhO1xyXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICBib3JkZXItbGVmdDogNHB4IHNvbGlkICMwMDdiZmY7XHJcbn1cclxuXHJcbi8qIEFuc3dlciBTZWN0aW9uICovXHJcbi5hbnN3ZXItc2VjdGlvbiB7XHJcbiAgZmxleDogMTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbn1cclxuXHJcbi5hbnN3ZXItc2VjdGlvbiBsYWJlbCB7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgY29sb3I6ICMzMzM7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG5cclxuLmFuc3dlci10ZXh0YXJlYSB7XHJcbiAgZmxleDogMTtcclxuICBtaW4taGVpZ2h0OiAyMDBweDtcclxuICBwYWRkaW5nOiAxNXB4O1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBsaW5lLWhlaWdodDogMS41O1xyXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdTZWdvZSBVSScsIFJvYm90bywgc2Fucy1zZXJpZjtcclxuICByZXNpemU6IHZlcnRpY2FsO1xyXG4gIGJhY2tncm91bmQ6ICNmYWZhZmE7XHJcbn1cclxuXHJcbi5hbnN3ZXItdGV4dGFyZWE6Zm9jdXMge1xyXG4gIG91dGxpbmU6IG5vbmU7XHJcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xyXG4gIGJveC1zaGFkb3c6IDAgMCAwIDJweCByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxufVxyXG5cclxuLmFuc3dlci10ZXh0YXJlYTo6cGxhY2Vob2xkZXIge1xyXG4gIGNvbG9yOiAjNmM3NTdkO1xyXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcclxufVxyXG5cclxuLyogQW5zd2VyIEFjdGlvbnMgKi9cclxuLmFuc3dlci1hY3Rpb25zIHtcclxuICBtYXJnaW4tdG9wOiAxNXB4O1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcclxufVxyXG5cclxuLmNsZWFyLWJ0biB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGdhcDogNnB4O1xyXG4gIHBhZGRpbmc6IDhweCAxNnB4O1xyXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkYzM1NDU7XHJcbiAgY29sb3I6ICNkYzM1NDU7XHJcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICBmb250LXNpemU6IDEzcHg7XHJcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcclxufVxyXG5cclxuLmNsZWFyLWJ0bjpob3ZlciB7XHJcbiAgYmFja2dyb3VuZDogI2RjMzU0NTtcclxuICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbi5jbGVhci1idG46YWN0aXZlIHtcclxuICB0cmFuc2Zvcm06IHNjYWxlKDAuOTgpO1xyXG59XHJcblxyXG4vKiBObyBRdWVzdGlvbnMgU3RhdGUgKi9cclxuLm5vLXF1ZXN0aW9ucyB7XHJcbiAgZmxleDogMTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn1cclxuXHJcbi5uby1xdWVzdGlvbnMtY29udGVudCB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGNvbG9yOiAjNmM3NTdkO1xyXG59XHJcblxyXG4ubm8tcXVlc3Rpb25zLWNvbnRlbnQgaSB7XHJcbiAgZm9udC1zaXplOiA0OHB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDE1cHg7XHJcbiAgY29sb3I6ICNkZWUyZTY7XHJcbn1cclxuXHJcbi5uby1xdWVzdGlvbnMtY29udGVudCBoMyB7XHJcbiAgbWFyZ2luOiAwIDAgMTBweCAwO1xyXG4gIGNvbG9yOiAjNDk1MDU3O1xyXG59XHJcblxyXG4ubm8tcXVlc3Rpb25zLWNvbnRlbnQgcCB7XHJcbiAgbWFyZ2luOiAwO1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxufVxyXG5cclxuXHJcblxyXG4vKiBSZXNwb25zaXZlIERlc2lnbiAqL1xyXG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAuc3ViamVjdGl2ZS1xYS1jb250YWluZXIge1xyXG4gICAgcGFkZGluZzogMTVweDtcclxuICB9XHJcbiAgXHJcbiAgLnF1ZXN0aW9uLXRleHQge1xyXG4gICAgcGFkZGluZzogMTVweDtcclxuICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICB9XHJcbiAgXHJcbiAgLmFuc3dlci10ZXh0YXJlYSB7XHJcbiAgICBtaW4taGVpZ2h0OiAxNTBweDtcclxuICAgIHBhZGRpbmc6IDEycHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5hbnN3ZXItYWN0aW9ucyB7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICB9XHJcbn0gIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["EventEmitter","CommonModule","ReactiveFormsModule","FormControl","debounceTime","distinctUntilChanged","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","SubjectiveQAComponent_div_1_Template_button_click_9_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","clearAnswer","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate1","tmp_1_0","getCurrentQuestion","question","ɵɵproperty","answerControl","SubjectiveQAComponent","constructor","interviewService","domain","resumeId","currentQuestionIndex","answersUpdate","questions","answers","evaluationInProgress","Set","ngOnInit","loadQuestions","setupAnswerControl","ngOnChanges","updateAnswerControl","id","experienceLevel","valueChanges","pipe","subscribe","value","saveCurrentAnswer","currentQuestion","existingAnswer","find","a","questionId","setValue","answer","emitEvent","existingIndex","findIndex","answerData","evaluated","lastEvaluatedAnswer","similarity","correct","push","emit","evaluateAnswerSilently","length","userAnswer","answerIndex","_this","_asyncToGenerator","trim","has","console","log","calculateTextSimilarity","add","chatRequest","questionText","questionType","response","sendChatResponse","toPromise","error","delete","text1","text2","toLowerCase","b","wordsA","split","wordsB","allWords","intersection","filter","word","includes","size","getAnsweredCount","getTotalQuestions","ɵɵdirectiveInject","i1","InterviewService","selectors","inputs","outputs","standalone","features","ɵɵNgOnChangesFeature","ɵɵStandaloneFeature","decls","vars","consts","template","SubjectiveQAComponent_Template","rf","ctx","ɵɵtemplate","SubjectiveQAComponent_div_1_Template","SubjectiveQAComponent_div_2_Template","i2","NgIf","i3","DefaultValueAccessor","NgControlStatus","FormControlDirective","styles"],"sources":["C:\\Frontend\\src\\app\\components\\subjective-qa\\subjective-qa.component.ts","C:\\Frontend\\src\\app\\components\\subjective-qa\\subjective-qa.component.html"],"sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormControl } from '@angular/forms';\r\nimport { InterviewService, ChatRequest } from '../../services/interview.service';\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\n\r\ninterface SubjectiveQuestion {\r\n  id: string;\r\n  question: string;\r\n  domain: string;\r\n  experienceLevel: string;\r\n}\r\n\r\ninterface SubjectiveAnswer {\r\n  questionId: string;\r\n  answer: string;\r\n  similarity?: number;\r\n  correct?: boolean;\r\n  evaluated?: boolean;\r\n  lastEvaluatedAnswer?: string;  // Track what was last evaluated\r\n}\r\n\r\n@Component({\r\n  selector: 'app-subjective-qa',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './subjective-qa.component.html',\r\n  styleUrls: ['./subjective-qa.component.css']\r\n})\r\nexport class SubjectiveQAComponent implements OnInit {\r\n  @Input() domain: string = '';\r\n  @Input() resumeId: string = '';\r\n  @Input() currentQuestionIndex: number = 0;\r\n  @Output() answersUpdate = new EventEmitter<SubjectiveAnswer[]>();\r\n\r\n  questions: SubjectiveQuestion[] = [];\r\n  answerControl = new FormControl('');\r\n  answers: SubjectiveAnswer[] = [];\r\n  private evaluationInProgress = new Set<string>(); // Track ongoing evaluations\r\n\r\n  constructor(private interviewService: InterviewService) {}\r\n\r\n  ngOnInit() {\r\n    this.loadQuestions();\r\n    this.setupAnswerControl();\r\n  }\r\n\r\n  ngOnChanges() {\r\n    // When question index changes, update the answer control\r\n    this.updateAnswerControl();\r\n  }\r\n\r\n  private loadQuestions() {\r\n    // Simple demo questions - expected answers will be generated by AI\r\n    this.questions = [\r\n      {\r\n        id: 'subj_1',\r\n        question: 'Explain the difference between synchronous and asynchronous programming. Provide examples of when you would use each approach.',\r\n        domain: this.domain || 'Software Development',\r\n        experienceLevel: 'intermediate'\r\n      },\r\n      {\r\n        id: 'subj_2', \r\n        question: 'Describe your experience with database optimization. What techniques have you used to improve query performance?',\r\n        domain: this.domain || 'Software Development',\r\n        experienceLevel: 'intermediate'\r\n      },\r\n      {\r\n        id: 'subj_3',\r\n        question: 'How do you approach debugging a complex issue in a production environment? Walk through your process.',\r\n        domain: this.domain || 'Software Development', \r\n        experienceLevel: 'intermediate'\r\n      },\r\n      {\r\n        id: 'subj_4',\r\n        question: 'Explain the concept of microservices architecture. What are the benefits and challenges of implementing microservices?',\r\n        domain: this.domain || 'Software Development',\r\n        experienceLevel: 'senior'\r\n      }\r\n    ];\r\n  }\r\n\r\n  private setupAnswerControl() {\r\n    this.answerControl.valueChanges\r\n      .pipe(debounceTime(500), distinctUntilChanged())\r\n      .subscribe(value => {\r\n        this.saveCurrentAnswer(value || '');\r\n      });\r\n  }\r\n\r\n  private updateAnswerControl() {\r\n    const currentQuestion = this.getCurrentQuestion();\r\n    if (currentQuestion) {\r\n      const existingAnswer = this.answers.find(a => a.questionId === currentQuestion.id);\r\n      this.answerControl.setValue(existingAnswer?.answer || '', { emitEvent: false });\r\n    }\r\n  }\r\n\r\n  getCurrentQuestion(): SubjectiveQuestion | null {\r\n    return this.questions[this.currentQuestionIndex] || null;\r\n  }\r\n\r\n  private saveCurrentAnswer(answer: string) {\r\n    const currentQuestion = this.getCurrentQuestion();\r\n    if (currentQuestion) {\r\n      const existingIndex = this.answers.findIndex(a => a.questionId === currentQuestion.id);\r\n      const answerData: SubjectiveAnswer = {\r\n        questionId: currentQuestion.id,\r\n        answer: answer,\r\n        evaluated: false\r\n      };\r\n\r\n      if (existingIndex >= 0) {\r\n        // Preserve evaluation status and similarity if answer hasn't changed much\r\n        const existingAnswer = this.answers[existingIndex];\r\n        if (existingAnswer.lastEvaluatedAnswer) {\r\n          answerData.similarity = existingAnswer.similarity;\r\n          answerData.correct = existingAnswer.correct;\r\n          answerData.evaluated = existingAnswer.evaluated;\r\n          answerData.lastEvaluatedAnswer = existingAnswer.lastEvaluatedAnswer;\r\n        }\r\n        this.answers[existingIndex] = answerData;\r\n      } else {\r\n        this.answers.push(answerData);\r\n      }\r\n\r\n      this.answersUpdate.emit(this.answers);\r\n\r\n      // Only trigger AI evaluation if answer has changed significantly\r\n      this.evaluateAnswerSilently(currentQuestion, answer, existingIndex >= 0 ? existingIndex : this.answers.length - 1);\r\n    }\r\n  }\r\n\r\n  private async evaluateAnswerSilently(question: SubjectiveQuestion, userAnswer: string, answerIndex: number) {\r\n    // Skip evaluation if answer is too short\r\n    if (!userAnswer.trim() || userAnswer.length < 10) {\r\n      return;\r\n    }\r\n\r\n    // Check if evaluation is already in progress for this question\r\n    if (this.evaluationInProgress.has(question.id)) {\r\n      console.log('Evaluation already in progress for question:', question.id);\r\n      return;\r\n    }\r\n\r\n    // Check if this answer has already been evaluated (avoid duplicates)\r\n    const existingAnswer = this.answers[answerIndex];\r\n    if (existingAnswer && existingAnswer.lastEvaluatedAnswer) {\r\n      const similarity = this.calculateTextSimilarity(userAnswer, existingAnswer.lastEvaluatedAnswer);\r\n      if (similarity > 0.9) { // 90% similar - don't re-evaluate\r\n        console.log('Answer too similar to last evaluated, skipping evaluation');\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Mark evaluation as in progress\r\n    this.evaluationInProgress.add(question.id);\r\n\r\n    try {\r\n      const chatRequest: ChatRequest = {\r\n        questionText: question.question,        // Actual interview question\r\n        userAnswer: userAnswer,                 // User's typed answer\r\n        resumeId: this.resumeId,\r\n        domain: this.domain,\r\n        questionType: 'SUBJECTIVE'\r\n      };\r\n\r\n      console.log('Starting AI evaluation for question:', question.id);\r\n      const response = await this.interviewService.sendChatResponse(chatRequest).toPromise();\r\n      \r\n      if (response && answerIndex < this.answers.length) {\r\n        // Update answer with AI evaluation results\r\n        this.answers[answerIndex] = {\r\n          ...this.answers[answerIndex],\r\n          similarity: response.similarity,\r\n          correct: response.correct,\r\n          evaluated: true,\r\n          lastEvaluatedAnswer: userAnswer  // Track what was evaluated\r\n        };\r\n        \r\n        console.log('AI evaluation completed. Similarity:', response.similarity);\r\n        // Emit updated answers for scoring calculation\r\n        this.answersUpdate.emit(this.answers);\r\n      }\r\n    } catch (error) {\r\n      console.error('Silent AI evaluation failed:', error);\r\n      // Mark as evaluated even if failed to avoid repeated attempts\r\n      if (answerIndex < this.answers.length) {\r\n        this.answers[answerIndex].evaluated = true;\r\n        this.answers[answerIndex].lastEvaluatedAnswer = userAnswer;\r\n      }\r\n    } finally {\r\n      // Remove from in-progress tracking\r\n      this.evaluationInProgress.delete(question.id);\r\n    }\r\n  }\r\n\r\n  // Simple text similarity check to avoid re-evaluating similar answers\r\n  private calculateTextSimilarity(text1: string, text2: string): number {\r\n    if (!text1 || !text2) return 0;\r\n    \r\n    const a = text1.toLowerCase().trim();\r\n    const b = text2.toLowerCase().trim();\r\n    \r\n    if (a === b) return 1;\r\n    \r\n    // Simple word-based similarity\r\n    const wordsA = a.split(/\\s+/);\r\n    const wordsB = b.split(/\\s+/);\r\n    const allWords = new Set([...wordsA, ...wordsB]);\r\n    const intersection = wordsA.filter(word => wordsB.includes(word));\r\n    \r\n    return intersection.length / allWords.size;\r\n  }\r\n\r\n  clearAnswer() {\r\n    this.answerControl.setValue('');\r\n  }\r\n\r\n  getAnsweredCount(): number {\r\n    return this.answers.filter(a => a.answer.trim().length > 0).length;\r\n  }\r\n\r\n  getTotalQuestions(): number {\r\n    return this.questions.length;\r\n  }\r\n} ","<div class=\"subjective-qa-container\">\r\n  <!-- Current Question Display -->\r\n  <div *ngIf=\"getCurrentQuestion()\" class=\"question-display\">\r\n    <div class=\"question-text\">\r\n      {{ getCurrentQuestion()?.question }}\r\n    </div>\r\n    \r\n    <!-- Answer Input -->\r\n    <div class=\"answer-section\">\r\n      <label for=\"answer-textarea\">Your Answer:</label>\r\n      <textarea \r\n        id=\"answer-textarea\"\r\n        [formControl]=\"answerControl\"\r\n        class=\"answer-textarea\"\r\n        placeholder=\"Type your detailed answer here...\"\r\n        rows=\"8\">\r\n      </textarea>\r\n      \r\n      <!-- Action Button -->\r\n      <div class=\"answer-actions\">\r\n        <button \r\n          class=\"clear-btn\"\r\n          (click)=\"clearAnswer()\"\r\n          type=\"button\">\r\n          <i class=\"fas fa-times\"></i>\r\n          Clear Answer\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- No Questions State -->\r\n  <div *ngIf=\"!getCurrentQuestion()\" class=\"no-questions\">\r\n    <div class=\"no-questions-content\">\r\n      <i class=\"fas fa-question-circle\"></i>\r\n      <h3>No Questions Available</h3>\r\n      <p>Please check back later or contact support.</p>\r\n    </div>\r\n  </div>\r\n\r\n\r\n</div> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}