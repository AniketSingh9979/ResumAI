{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let InterviewService = /*#__PURE__*/(() => {\n  class InterviewService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:8080/api';\n    }\n    // Get available domains\n    getAvailableDomains() {\n      return this.http.get(`${this.apiUrl}/interview/domains`);\n    }\n    // Get interview configuration based on experience\n    getInterviewConfiguration(experience) {\n      return this.http.get(`${this.apiUrl}/interview/configuration`, {\n        params: {\n          experience: experience.toString()\n        }\n      });\n    }\n    // Check interview availability\n    checkInterviewAvailability(domain, experience) {\n      return this.http.get(`${this.apiUrl}/interview/availability`, {\n        params: {\n          domain: domain,\n          experience: experience.toString()\n        }\n      });\n    }\n    // Get coding questions\n    getCodingQuestions(domain, experience, count = 3) {\n      return this.http.get(`${this.apiUrl}/interview/coding-questions`, {\n        params: {\n          domain: domain,\n          experience: experience.toString(),\n          count: count.toString()\n        }\n      });\n    }\n    // Get MCQ questions  \n    getMCQQuestions(domain, experience, count = 5) {\n      return this.http.get(`${this.apiUrl}/interview/mcq-questions`, {\n        params: {\n          domain: domain,\n          experience: experience.toString(),\n          count: count.toString()\n        }\n      });\n    }\n    // Get subjective questions for Q&A section\n    getSubjectiveQuestions(domain, count = 4) {\n      return this.http.get(`${this.apiUrl}/interview/subjective-questions`, {\n        params: {\n          domain: domain,\n          count: count.toString()\n        }\n      });\n    }\n    // Get complete question set for interview\n    getCompleteQuestionSet(domain, experience) {\n      return this.http.get(`${this.apiUrl}/interview/complete-set`, {\n        params: {\n          domain: domain,\n          experience: experience.toString()\n        }\n      });\n    }\n    // Send Q&A response for evaluation\n    sendChatResponse(request) {\n      return this.http.post(`${this.apiUrl}/chat/respond`, request);\n    }\n    // Get chat history for a candidate\n    getChatHistory(resumeId) {\n      return this.http.get(`${this.apiUrl}/chat/history/${resumeId}`);\n    }\n    // Submit complete interview\n    submitInterview(submission) {\n      return this.http.post(`${this.apiUrl}/chat/submitInterview`, submission);\n    }\n    // Utility methods for session management\n    setCandidateInfo(info) {\n      sessionStorage.setItem('candidateInfo', JSON.stringify(info));\n    }\n    getCandidateInfo() {\n      const info = sessionStorage.getItem('candidateInfo');\n      return info ? JSON.parse(info) : null;\n    }\n    generateResumeId() {\n      return 'RES_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    }\n    // Convert MCQ options string to array\n    parseOptions(optionsString) {\n      try {\n        // Try to parse as JSON first\n        return JSON.parse(optionsString);\n      } catch {\n        // Fall back to comma-separated parsing\n        return optionsString.split(',').map(opt => opt.trim());\n      }\n    }\n    // Calculate scores for different sections\n    calculateMCQScore(answers, questions) {\n      if (questions.length === 0) return 0;\n      let correctCount = 0;\n      answers.forEach(answer => {\n        const question = questions.find(q => q.id === answer.questionId);\n        if (question) {\n          // Note: Actual scoring would need the correct answers from backend\n          // This is a placeholder implementation\n          correctCount++; // Simplified for demo\n        }\n      });\n      return Math.round(correctCount / questions.length * 100);\n    }\n    // Format time remaining\n    formatTime(seconds) {\n      const minutes = Math.floor(seconds / 60);\n      const remainingSeconds = seconds % 60;\n      return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n    // Get experience level display text\n    getExperienceLevel(years) {\n      if (years <= 1) return 'Fresher';\n      if (years <= 3) return 'Junior';\n      if (years <= 6) return 'Mid-level';\n      return 'Senior';\n    }\n    static {\n      this.ɵfac = function InterviewService_Factory(t) {\n        return new (t || InterviewService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: InterviewService,\n        factory: InterviewService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return InterviewService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}