{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class InterviewService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = '/api/interview';\n    // Dummy data for development\n    this.codingQuestionsData = [{\n      id: 'coding-1',\n      title: 'Two Sum Problem',\n      description: 'Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.',\n      starterCode: 'function twoSum(nums, target) {\\n    // Your code here\\n}'\n    }, {\n      id: 'coding-2',\n      title: 'Reverse String',\n      description: 'Write a function that reverses a string. The input string is given as an array of characters s.',\n      starterCode: 'function reverseString(s) {\\n    // Your code here\\n}'\n    }];\n    this.mcqQuestionsData = [{\n      id: 'mcq-1',\n      question: 'Which of the following is NOT a JavaScript data type?',\n      options: ['String', 'Boolean', 'Integer', 'Object'],\n      type: 'single'\n    }, {\n      id: 'mcq-2',\n      question: 'What are the benefits of using TypeScript? (Select all that apply)',\n      options: ['Type Safety', 'Better IDE Support', 'Compile-time Error Detection', 'Runtime Performance Improvement'],\n      type: 'multiple'\n    }, {\n      id: 'mcq-3',\n      question: 'Which Angular lifecycle hook is called after component initialization?',\n      options: ['ngOnInit', 'ngAfterViewInit', 'ngOnDestroy', 'ngOnChanges'],\n      type: 'single'\n    }, {\n      id: 'mcq-4',\n      question: 'What are valid ways to create an Observable in RxJS? (Select all that apply)',\n      options: ['Observable.create()', 'new Observable()', 'of()', 'from()'],\n      type: 'multiple'\n    }];\n  }\n  getCodingQuestions() {\n    // In production, this would be: return this.http.get<CodingQuestion[]>(`${this.apiUrl}/coding-questions`);\n    return new BehaviorSubject(this.codingQuestionsData).asObservable();\n  }\n  getMCQQuestions() {\n    // In production, this would be: return this.http.get<MCQQuestion[]>(`${this.apiUrl}/mcq-questions`);\n    return new BehaviorSubject(this.mcqQuestionsData).asObservable();\n  }\n  submitInterview(submission) {\n    console.log('Submitting interview:', submission);\n    // In production, this would be: return this.http.post(`${this.apiUrl}/submit`, submission);\n    // Simulate API response\n    return new BehaviorSubject({\n      success: true,\n      message: 'Interview submitted successfully',\n      submissionId: Date.now().toString()\n    }).asObservable();\n  }\n  // Helper method to get a specific coding question\n  getCodingQuestion(id) {\n    return this.codingQuestionsData.find(q => q.id === id);\n  }\n  // Helper method to get a specific MCQ question\n  getMCQQuestion(id) {\n    return this.mcqQuestionsData.find(q => q.id === id);\n  }\n  static {\n    this.ɵfac = function InterviewService_Factory(t) {\n      return new (t || InterviewService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InterviewService,\n      factory: InterviewService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","InterviewService","constructor","http","apiUrl","codingQuestionsData","id","title","description","starterCode","mcqQuestionsData","question","options","type","getCodingQuestions","asObservable","getMCQQuestions","submitInterview","submission","console","log","success","message","submissionId","Date","now","toString","getCodingQuestion","find","q","getMCQQuestion","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Frontend\\src\\app\\services\\interview.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\nexport interface CodingQuestion {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  starterCode?: string;\r\n}\r\n\r\nexport interface MCQQuestion {\r\n  id: string;\r\n  question: string;\r\n  options: string[];\r\n  type: 'single' | 'multiple';\r\n}\r\n\r\nexport interface MCQAnswer {\r\n  questionId: string;\r\n  selectedOptions: string[];\r\n}\r\n\r\nexport interface CandidateInfo {\r\n  name: string;\r\n  role: string;\r\n  experience: string;\r\n}\r\n\r\nexport interface InterviewSubmission {\r\n  candidateInfo: CandidateInfo;\r\n  codingAnswers: { [questionId: string]: string };\r\n  mcqAnswers: MCQAnswer[];\r\n  chatLogs: any[];\r\n  completedAt: Date;\r\n  timeSpent: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InterviewService {\r\n  private apiUrl = '/api/interview';\r\n  \r\n  // Dummy data for development\r\n  private codingQuestionsData: CodingQuestion[] = [\r\n    {\r\n      id: 'coding-1',\r\n      title: 'Two Sum Problem',\r\n      description: 'Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.',\r\n      starterCode: 'function twoSum(nums, target) {\\n    // Your code here\\n}'\r\n    },\r\n    {\r\n      id: 'coding-2',\r\n      title: 'Reverse String',\r\n      description: 'Write a function that reverses a string. The input string is given as an array of characters s.',\r\n      starterCode: 'function reverseString(s) {\\n    // Your code here\\n}'\r\n    }\r\n  ];\r\n\r\n  private mcqQuestionsData: MCQQuestion[] = [\r\n    {\r\n      id: 'mcq-1',\r\n      question: 'Which of the following is NOT a JavaScript data type?',\r\n      options: ['String', 'Boolean', 'Integer', 'Object'],\r\n      type: 'single'\r\n    },\r\n    {\r\n      id: 'mcq-2',\r\n      question: 'What are the benefits of using TypeScript? (Select all that apply)',\r\n      options: ['Type Safety', 'Better IDE Support', 'Compile-time Error Detection', 'Runtime Performance Improvement'],\r\n      type: 'multiple'\r\n    },\r\n    {\r\n      id: 'mcq-3',\r\n      question: 'Which Angular lifecycle hook is called after component initialization?',\r\n      options: ['ngOnInit', 'ngAfterViewInit', 'ngOnDestroy', 'ngOnChanges'],\r\n      type: 'single'\r\n    },\r\n    {\r\n      id: 'mcq-4',\r\n      question: 'What are valid ways to create an Observable in RxJS? (Select all that apply)',\r\n      options: ['Observable.create()', 'new Observable()', 'of()', 'from()'],\r\n      type: 'multiple'\r\n    }\r\n  ];\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getCodingQuestions(): Observable<CodingQuestion[]> {\r\n    // In production, this would be: return this.http.get<CodingQuestion[]>(`${this.apiUrl}/coding-questions`);\r\n    return new BehaviorSubject(this.codingQuestionsData).asObservable();\r\n  }\r\n\r\n  getMCQQuestions(): Observable<MCQQuestion[]> {\r\n    // In production, this would be: return this.http.get<MCQQuestion[]>(`${this.apiUrl}/mcq-questions`);\r\n    return new BehaviorSubject(this.mcqQuestionsData).asObservable();\r\n  }\r\n\r\n  submitInterview(submission: InterviewSubmission): Observable<any> {\r\n    console.log('Submitting interview:', submission);\r\n    // In production, this would be: return this.http.post(`${this.apiUrl}/submit`, submission);\r\n    \r\n    // Simulate API response\r\n    return new BehaviorSubject({ \r\n      success: true, \r\n      message: 'Interview submitted successfully',\r\n      submissionId: Date.now().toString()\r\n    }).asObservable();\r\n  }\r\n\r\n  // Helper method to get a specific coding question\r\n  getCodingQuestion(id: string): CodingQuestion | undefined {\r\n    return this.codingQuestionsData.find(q => q.id === id);\r\n  }\r\n\r\n  // Helper method to get a specific MCQ question\r\n  getMCQQuestion(id: string): MCQQuestion | undefined {\r\n    return this.mcqQuestionsData.find(q => q.id === id);\r\n  }\r\n} "],"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;;;AAuClD,OAAM,MAAOC,gBAAgB;EA8C3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IA7ChB,KAAAC,MAAM,GAAG,gBAAgB;IAEjC;IACQ,KAAAC,mBAAmB,GAAqB,CAC9C;MACEC,EAAE,EAAE,UAAU;MACdC,KAAK,EAAE,iBAAiB;MACxBC,WAAW,EAAE,uOAAuO;MACpPC,WAAW,EAAE;KACd,EACD;MACEH,EAAE,EAAE,UAAU;MACdC,KAAK,EAAE,gBAAgB;MACvBC,WAAW,EAAE,iGAAiG;MAC9GC,WAAW,EAAE;KACd,CACF;IAEO,KAAAC,gBAAgB,GAAkB,CACxC;MACEJ,EAAE,EAAE,OAAO;MACXK,QAAQ,EAAE,uDAAuD;MACjEC,OAAO,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC;MACnDC,IAAI,EAAE;KACP,EACD;MACEP,EAAE,EAAE,OAAO;MACXK,QAAQ,EAAE,oEAAoE;MAC9EC,OAAO,EAAE,CAAC,aAAa,EAAE,oBAAoB,EAAE,8BAA8B,EAAE,iCAAiC,CAAC;MACjHC,IAAI,EAAE;KACP,EACD;MACEP,EAAE,EAAE,OAAO;MACXK,QAAQ,EAAE,wEAAwE;MAClFC,OAAO,EAAE,CAAC,UAAU,EAAE,iBAAiB,EAAE,aAAa,EAAE,aAAa,CAAC;MACtEC,IAAI,EAAE;KACP,EACD;MACEP,EAAE,EAAE,OAAO;MACXK,QAAQ,EAAE,8EAA8E;MACxFC,OAAO,EAAE,CAAC,qBAAqB,EAAE,kBAAkB,EAAE,MAAM,EAAE,QAAQ,CAAC;MACtEC,IAAI,EAAE;KACP,CACF;EAEsC;EAEvCC,kBAAkBA,CAAA;IAChB;IACA,OAAO,IAAId,eAAe,CAAC,IAAI,CAACK,mBAAmB,CAAC,CAACU,YAAY,EAAE;EACrE;EAEAC,eAAeA,CAAA;IACb;IACA,OAAO,IAAIhB,eAAe,CAAC,IAAI,CAACU,gBAAgB,CAAC,CAACK,YAAY,EAAE;EAClE;EAEAE,eAAeA,CAACC,UAA+B;IAC7CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,UAAU,CAAC;IAChD;IAEA;IACA,OAAO,IAAIlB,eAAe,CAAC;MACzBqB,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,kCAAkC;MAC3CC,YAAY,EAAEC,IAAI,CAACC,GAAG,EAAE,CAACC,QAAQ;KAClC,CAAC,CAACX,YAAY,EAAE;EACnB;EAEA;EACAY,iBAAiBA,CAACrB,EAAU;IAC1B,OAAO,IAAI,CAACD,mBAAmB,CAACuB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvB,EAAE,KAAKA,EAAE,CAAC;EACxD;EAEA;EACAwB,cAAcA,CAACxB,EAAU;IACvB,OAAO,IAAI,CAACI,gBAAgB,CAACkB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvB,EAAE,KAAKA,EAAE,CAAC;EACrD;;;uBA9EWL,gBAAgB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAhBjC,gBAAgB;MAAAkC,OAAA,EAAhBlC,gBAAgB,CAAAmC,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}