{"ast":null,"code":"import _asyncToGenerator from \"C:/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormControl } from '@angular/forms';\nimport { SubjectiveQAComponent } from '../subjective-qa/subjective-qa.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/interview.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction InterviewTestPageComponent_div_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", ctx_r1.candidateInfo.name, \" | \", ctx_r1.candidateInfo.domain, \" \");\n  }\n}\nfunction InterviewTestPageComponent_div_0_div_33_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35)(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 36);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"form\", 37)(6, \"label\");\n    i0.ɵɵtext(7, \"Your Solution:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"textarea\", 38);\n    i0.ɵɵtext(9, \"            \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.currentCodingQuestion.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.currentCodingQuestion.description, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.codingForm);\n  }\n}\nfunction InterviewTestPageComponent_div_0_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32)(1, \"div\", 33)(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(4, InterviewTestPageComponent_div_0_div_33_div_4_Template, 10, 3, \"div\", 34);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Question \", ctx_r1.currentCodingIndex + 1, \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.currentCodingQuestion);\n  }\n}\nfunction InterviewTestPageComponent_div_0_div_34_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35)(1, \"div\", 36);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    let tmp_3_0;\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", (tmp_3_0 = ctx_r1.getCurrentMCQQuestion()) == null ? null : tmp_3_0.description, \" \");\n  }\n}\nfunction InterviewTestPageComponent_div_0_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32)(1, \"div\", 33)(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(4, InterviewTestPageComponent_div_0_div_34_div_4_Template, 3, 1, \"div\", 34);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Question \", ctx_r1.currentMCQIndex + 1, \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.getCurrentMCQQuestion());\n  }\n}\nfunction InterviewTestPageComponent_div_0_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 32)(1, \"div\", 33)(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 35)(5, \"app-subjective-qa\", 39);\n    i0.ɵɵlistener(\"answersUpdate\", function InterviewTestPageComponent_div_0_div_35_Template_app_subjective_qa_answersUpdate_5_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onSubjectiveAnswersUpdate($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Question \", ctx_r1.currentSubjectiveIndex + 1, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"domain\", (ctx_r1.candidateInfo == null ? null : ctx_r1.candidateInfo.domain) || \"\")(\"resumeId\", ctx_r1.resumeId)(\"currentQuestionIndex\", ctx_r1.currentSubjectiveIndex);\n  }\n}\nfunction InterviewTestPageComponent_div_0_div_37_ng_container_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 48)(1, \"input\", 49);\n    i0.ɵɵlistener(\"change\", function InterviewTestPageComponent_div_0_div_37_ng_container_5_div_1_Template_input_change_1_listener() {\n      const option_r6 = i0.ɵɵrestoreView(_r5).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.selectSingleOption(option_r6));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 50);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    let tmp_7_0;\n    const option_r6 = ctx.$implicit;\n    const i_r7 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"id\", \"option_\" + i_r7)(\"name\", \"mcq_\" + ((tmp_7_0 = ctx_r1.getCurrentMCQQuestion()) == null ? null : tmp_7_0.id))(\"value\", option_r6);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"for\", \"option_\" + i_r7);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(option_r6);\n  }\n}\nfunction InterviewTestPageComponent_div_0_div_37_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, InterviewTestPageComponent_div_0_div_37_ng_container_5_div_1_Template, 4, 5, \"div\", 47);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getCurrentMCQOptions());\n  }\n}\nfunction InterviewTestPageComponent_div_0_div_37_ng_container_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 48)(1, \"input\", 52);\n    i0.ɵɵlistener(\"change\", function InterviewTestPageComponent_div_0_div_37_ng_container_6_div_1_Template_input_change_1_listener($event) {\n      const option_r9 = i0.ɵɵrestoreView(_r8).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.toggleMultipleOption(option_r9, $event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 50);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const option_r9 = ctx.$implicit;\n    const i_r10 = ctx.index;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"id\", \"option_\" + i_r10)(\"value\", option_r9);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"for\", \"option_\" + i_r10);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(option_r9);\n  }\n}\nfunction InterviewTestPageComponent_div_0_div_37_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, InterviewTestPageComponent_div_0_div_37_ng_container_6_div_1_Template, 4, 4, \"div\", 47);\n    i0.ɵɵelementStart(2, \"small\", 51);\n    i0.ɵɵtext(3, \"Select all that apply\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getCurrentMCQOptions());\n  }\n}\nfunction InterviewTestPageComponent_div_0_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 40)(1, \"h4\");\n    i0.ɵɵtext(2, \"Select an option\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 41)(4, \"div\", 42);\n    i0.ɵɵtemplate(5, InterviewTestPageComponent_div_0_div_37_ng_container_5_Template, 2, 1, \"ng-container\", 43)(6, InterviewTestPageComponent_div_0_div_37_ng_container_6_Template, 4, 1, \"ng-container\", 43);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 44)(8, \"button\", 45);\n    i0.ɵɵlistener(\"click\", function InterviewTestPageComponent_div_0_div_37_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.clearCurrentMCQResponse());\n    });\n    i0.ɵɵelement(9, \"i\", 46);\n    i0.ɵɵtext(10, \" Clear Response \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    let tmp_2_0;\n    let tmp_3_0;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !((tmp_2_0 = ctx_r1.getCurrentMCQQuestion()) == null ? null : tmp_2_0.multipleSelection));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx_r1.getCurrentMCQQuestion()) == null ? null : tmp_3_0.multipleSelection);\n  }\n}\nfunction InterviewTestPageComponent_div_0_i_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 53);\n  }\n}\nfunction InterviewTestPageComponent_div_0_i_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 54);\n  }\n}\nfunction InterviewTestPageComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3)(2, \"div\", 4)(3, \"div\", 5)(4, \"span\", 6);\n    i0.ɵɵtext(5, \"Technical Interview Assessment\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(6, InterviewTestPageComponent_div_0_div_6_Template, 2, 2, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 8)(8, \"div\", 9);\n    i0.ɵɵelement(9, \"i\", 10);\n    i0.ɵɵelementStart(10, \"span\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 11)(13, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function InterviewTestPageComponent_div_0_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.navigatePreviousQuestion());\n    });\n    i0.ɵɵelement(14, \"i\", 13);\n    i0.ɵɵtext(15, \" Previous \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"span\", 14);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function InterviewTestPageComponent_div_0_Template_button_click_18_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.navigateNextQuestion());\n    });\n    i0.ɵɵtext(19, \" Next \");\n    i0.ɵɵelement(20, \"i\", 16);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(21, \"div\", 17)(22, \"div\", 18)(23, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function InterviewTestPageComponent_div_0_Template_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.selectSection(\"coding\"));\n    });\n    i0.ɵɵtext(24, \" Section #1 (Coding) \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function InterviewTestPageComponent_div_0_Template_button_click_25_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.selectSection(\"mcq\"));\n    });\n    i0.ɵɵtext(26, \" Section #2 (MCQ) \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function InterviewTestPageComponent_div_0_Template_button_click_27_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.selectSection(\"qa\"));\n    });\n    i0.ɵɵtext(28, \" Section #3 (Q&A) \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(29, \"div\", 20);\n    i0.ɵɵtext(30);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"div\", 21)(32, \"div\", 22);\n    i0.ɵɵtemplate(33, InterviewTestPageComponent_div_0_div_33_Template, 5, 2, \"div\", 23)(34, InterviewTestPageComponent_div_0_div_34_Template, 5, 2, \"div\", 23)(35, InterviewTestPageComponent_div_0_div_35_Template, 6, 4, \"div\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(36, \"div\", 24);\n    i0.ɵɵtemplate(37, InterviewTestPageComponent_div_0_div_37_Template, 11, 2, \"div\", 25);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(38, \"div\", 26)(39, \"div\", 27)(40, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function InterviewTestPageComponent_div_0_Template_button_click_40_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.submitInterview());\n    });\n    i0.ɵɵtemplate(41, InterviewTestPageComponent_div_0_i_41_Template, 1, 0, \"i\", 29)(42, InterviewTestPageComponent_div_0_i_42_Template, 1, 0, \"i\", 30);\n    i0.ɵɵtext(43);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.candidateInfo);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"Test Time: \", ctx_r1.formatTime(ctx_r1.timeRemaining), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.canNavigatePrevious());\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r1.getCurrentQuestionIndex() + 1, \" of \", ctx_r1.getTotalQuestionsForSection(), \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.canNavigateNext());\n    i0.ɵɵadvance(5);\n    i0.ɵɵclassProp(\"active\", ctx_r1.activeSection === \"coding\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassProp(\"active\", ctx_r1.activeSection === \"mcq\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassProp(\"active\", ctx_r1.activeSection === \"qa\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\" Attempted: \", ctx_r1.getAttemptedCount(), \"/\", ctx_r1.getTotalQuestionsForSection(), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.activeSection === \"coding\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.activeSection === \"mcq\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.activeSection === \"qa\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.activeSection === \"mcq\" && ctx_r1.getCurrentMCQQuestion());\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.isSubmitting);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isSubmitting);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isSubmitting);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.isSubmitting ? \"Submitting...\" : \"Submit Interview\", \" \");\n  }\n}\nfunction InterviewTestPageComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 55)(1, \"div\", 56);\n    i0.ɵɵelement(2, \"i\", 54);\n    i0.ɵɵelementStart(3, \"h2\");\n    i0.ɵɵtext(4, \"Preparing Your Interview\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6, \"Loading questions based on your profile...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nexport let InterviewTestPageComponent = /*#__PURE__*/(() => {\n  class InterviewTestPageComponent {\n    constructor(fb, interviewService, route, router) {\n      this.fb = fb;\n      this.interviewService = interviewService;\n      this.route = route;\n      this.router = router;\n      this.activeSection = 'coding';\n      this.candidateInfo = null;\n      // Timer properties\n      this.timeRemaining = 45 * 60; // 45 minutes in seconds\n      // Question data\n      this.codingQuestions = [];\n      this.mcqQuestions = [];\n      this.currentCodingIndex = 0;\n      // Navigation\n      this.codingAnswers = {};\n      this.mcqAnswers = [];\n      this.subjectiveAnswers = [];\n      // Loading states\n      this.isLoading = true;\n      this.isSubmitting = false;\n      // Simple pre-parsed MCQ options (no caching needed)\n      this.mcqOptionsMap = {\n        'mcq-1': ['Java', 'HTML', 'CSS', 'SQL'],\n        'mcq-2': ['INSERT', 'SELECT', 'UPDATE', 'DELETE'],\n        'mcq-3': ['Angular', 'React', 'Node.js', 'MongoDB']\n      };\n      // Current question tracking for single-question view\n      this.currentMCQIndex = 0;\n      this.currentSubjectiveIndex = 0;\n      // Simple MCQ answer storage\n      this.mcqAnswerStorage = {};\n      this.codingForm = this.fb.group({\n        code: ['']\n      });\n      this.mcqForm = this.fb.group({\n        answers: this.fb.array([])\n      });\n      this.resumeId = this.interviewService.generateResumeId();\n    }\n    ngOnInit() {\n      this.loadCandidateInfo();\n      this.loadQuestions();\n      this.startTimer();\n    }\n    ngOnDestroy() {\n      if (this.timerInterval) {\n        clearInterval(this.timerInterval);\n      }\n    }\n    loadCandidateInfo() {\n      this.candidateInfo = this.interviewService.getCandidateInfo();\n      if (!this.candidateInfo) {\n        // Redirect to landing page if no candidate info\n        this.router.navigate(['/']);\n        return;\n      }\n    }\n    loadQuestions() {\n      if (!this.candidateInfo) return;\n      const {\n        domain,\n        experience\n      } = this.candidateInfo;\n      // Load complete question set\n      this.interviewService.getCompleteQuestionSet(domain, experience).subscribe({\n        next: data => {\n          this.codingQuestions = data.codingQuestions || [];\n          this.mcqQuestions = data.mcqQuestions || [];\n          this.setupForms();\n          this.isLoading = false;\n        },\n        error: error => {\n          console.error('Error loading questions:', error);\n          this.loadFallbackQuestions();\n          this.isLoading = false;\n        }\n      });\n    }\n    loadFallbackQuestions() {\n      // Fallback questions if backend is not available\n      this.codingQuestions = [{\n        id: 'coding-1',\n        title: 'Two Sum Problem',\n        description: 'Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.',\n        starterCode: 'function twoSum(nums, target) {\\n    // Your code here\\n}',\n        domain: this.candidateInfo?.domain || 'General',\n        difficulty: 'EASY',\n        experienceLevel: 'FRESHER'\n      }];\n      // Simple MCQ data with pre-parsed options\n      this.mcqQuestions = [{\n        id: 'mcq-1',\n        title: 'Programming Fundamentals',\n        description: 'Which of the following is a programming language?',\n        options: '[\"Java\", \"HTML\", \"CSS\", \"SQL\"]',\n        questionType: 'MCQ',\n        domain: this.candidateInfo?.domain || 'General',\n        multipleSelection: false,\n        difficulty: 'EASY'\n      }, {\n        id: 'mcq-2',\n        title: 'Database Concepts',\n        description: 'Which SQL command is used to retrieve data from a database?',\n        options: '[\"INSERT\", \"SELECT\", \"UPDATE\", \"DELETE\"]',\n        questionType: 'MCQ',\n        domain: this.candidateInfo?.domain || 'General',\n        multipleSelection: false,\n        difficulty: 'EASY'\n      }, {\n        id: 'mcq-3',\n        title: 'Web Development',\n        description: 'Which of the following are frontend technologies? (Select multiple)',\n        options: '[\"Angular\", \"React\", \"Node.js\", \"MongoDB\"]',\n        questionType: 'MCQ',\n        domain: this.candidateInfo?.domain || 'General',\n        multipleSelection: true,\n        difficulty: 'MEDIUM'\n      }];\n      this.setupForms();\n    }\n    setupForms() {\n      // Setup coding form\n      if (this.codingQuestions.length > 0) {\n        this.codingForm.patchValue({\n          code: this.codingQuestions[0].starterCode || ''\n        });\n      }\n      // Setup MCQ form\n      const answersArray = this.mcqForm.get('answers');\n      answersArray.clear();\n      this.mcqQuestions.forEach(question => {\n        if (question.multipleSelection) {\n          const checkboxGroup = this.fb.group({});\n          const options = this.interviewService.parseOptions(question.options);\n          options.forEach(option => {\n            checkboxGroup.addControl(option, new FormControl(false));\n          });\n          answersArray.push(checkboxGroup);\n        } else {\n          answersArray.push(new FormControl(''));\n        }\n      });\n    }\n    startTimer() {\n      this.timerInterval = setInterval(() => {\n        this.timeRemaining--;\n        if (this.timeRemaining <= 0) {\n          this.submitInterview();\n        }\n      }, 1000);\n    }\n    formatTime(seconds) {\n      return this.interviewService.formatTime(seconds);\n    }\n    selectSection(section) {\n      this.saveCurrentSectionData();\n      this.activeSection = section;\n    }\n    saveCurrentSectionData() {\n      if (this.activeSection === 'coding' && this.codingQuestions.length > 0) {\n        const currentQuestion = this.codingQuestions[this.currentCodingIndex];\n        this.codingAnswers[currentQuestion.id] = this.codingForm.value.code;\n      }\n      if (this.activeSection === 'mcq') {\n        this.saveMCQAnswers();\n      }\n    }\n    saveMCQAnswers() {\n      const formAnswers = this.mcqForm.value.answers;\n      this.mcqAnswers = [];\n      this.mcqQuestions.forEach((question, index) => {\n        const options = this.interviewService.parseOptions(question.options);\n        if (question.multipleSelection) {\n          const selectedOptions = [];\n          const checkboxGroup = formAnswers[index];\n          Object.keys(checkboxGroup).forEach(option => {\n            if (checkboxGroup[option]) {\n              selectedOptions.push(option);\n            }\n          });\n          if (selectedOptions.length > 0) {\n            this.mcqAnswers.push({\n              questionId: question.id,\n              selectedOptions\n            });\n          }\n        } else {\n          if (formAnswers[index]) {\n            this.mcqAnswers.push({\n              questionId: question.id,\n              selectedOptions: [formAnswers[index]]\n            });\n          }\n        }\n      });\n    }\n    navigateCoding(direction) {\n      this.saveCurrentSectionData();\n      if (direction === 'next' && this.currentCodingIndex < this.codingQuestions.length - 1) {\n        this.currentCodingIndex++;\n      } else if (direction === 'prev' && this.currentCodingIndex > 0) {\n        this.currentCodingIndex--;\n      }\n      const currentQuestion = this.codingQuestions[this.currentCodingIndex];\n      const savedAnswer = this.codingAnswers[currentQuestion.id];\n      this.codingForm.patchValue({\n        code: savedAnswer || currentQuestion.starterCode || ''\n      });\n    }\n    onSubjectiveAnswersUpdate(answers) {\n      this.subjectiveAnswers = answers;\n    }\n    submitInterview() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.saveCurrentSectionData();\n        _this.isSubmitting = true;\n        if (_this.timerInterval) {\n          clearInterval(_this.timerInterval);\n        }\n        if (!_this.candidateInfo) {\n          alert('Candidate information is missing. Please restart the interview.');\n          _this.router.navigate(['/']);\n          return;\n        }\n        try {\n          const submission = {\n            resumeId: _this.resumeId,\n            candidateName: _this.candidateInfo.name,\n            candidateEmail: _this.candidateInfo.email,\n            domain: _this.candidateInfo.domain,\n            experienceLevel: _this.interviewService.getExperienceLevel(_this.candidateInfo.experience),\n            totalQuestions: _this.codingQuestions.length + _this.mcqQuestions.length + _this.subjectiveAnswers.length,\n            codingQuestions: _this.codingQuestions.length,\n            mcqQuestions: _this.mcqQuestions.length,\n            subjectiveQuestions: _this.subjectiveAnswers.length,\n            correctAnswers: _this.calculateCorrectAnswers(),\n            scorePercentage: _this.calculateOverallScore(),\n            codingScore: _this.calculateCodingScore(),\n            mcqScore: _this.calculateMCQScore(),\n            subjectiveScore: _this.calculateSubjectiveScore(),\n            interviewDuration: Math.round((45 * 60 - _this.timeRemaining) / 60),\n            completedOnTime: _this.timeRemaining > 0,\n            status: 'COMPLETED',\n            feedbackSummary: _this.generateFeedbackSummary()\n          };\n          const response = yield _this.interviewService.submitInterview(submission).toPromise();\n          if (response && response.success) {\n            // Save interview summary for thank you page\n            const interviewSummary = {\n              candidateName: _this.candidateInfo.name,\n              domain: _this.candidateInfo.domain,\n              experienceLevel: _this.interviewService.getExperienceLevel(_this.candidateInfo.experience),\n              codingQuestions: _this.getCodingAttemptedCount(),\n              mcqQuestions: _this.getMCQAttemptedCount(),\n              subjectiveQuestions: _this.getSubjectiveAttemptedCount(),\n              totalQuestions: submission.totalQuestions,\n              interviewDuration: `${submission.interviewDuration} minutes`\n            };\n            sessionStorage.setItem('interviewSummary', JSON.stringify(interviewSummary));\n            // Navigate to thank you page\n            _this.router.navigate(['/thank-you']);\n          } else {\n            throw new Error('Submission failed');\n          }\n        } catch (error) {\n          console.error('Submission error:', error);\n          alert('There was an error submitting your interview. Please try again.');\n        } finally {\n          _this.isSubmitting = false;\n        }\n      })();\n    }\n    calculateCorrectAnswers() {\n      const subjectiveCorrect = this.subjectiveAnswers.filter(a => a.correct).length;\n      // MCQ and coding scoring would be implemented based on backend responses\n      return subjectiveCorrect;\n    }\n    calculateOverallScore() {\n      const scores = [this.calculateCodingScore(), this.calculateMCQScore(), this.calculateSubjectiveScore()].filter(score => score > 0);\n      return scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0;\n    }\n    calculateCodingScore() {\n      // Placeholder - would be calculated by backend\n      return Object.keys(this.codingAnswers).length > 0 ? 75 : 0;\n    }\n    calculateMCQScore() {\n      // Placeholder - would be calculated by backend\n      return this.mcqAnswers.length > 0 ? 80 : 0;\n    }\n    calculateSubjectiveScore() {\n      if (this.subjectiveAnswers.length === 0) return 0;\n      const avgSimilarity = this.subjectiveAnswers.reduce((sum, answer) => sum + (answer.similarity || 0), 0) / this.subjectiveAnswers.length;\n      return Math.round(avgSimilarity * 100);\n    }\n    generateFeedbackSummary() {\n      const sections = [];\n      if (Object.keys(this.codingAnswers).length > 0) {\n        sections.push('Coding: Demonstrated problem-solving abilities');\n      }\n      if (this.mcqAnswers.length > 0) {\n        sections.push('MCQ: Good technical knowledge');\n      }\n      if (this.subjectiveAnswers.length > 0) {\n        sections.push('Subjective: Clear communication and understanding');\n      }\n      return sections.join('. ') + '.';\n    }\n    get currentCodingQuestion() {\n      return this.codingQuestions[this.currentCodingIndex] || null;\n    }\n    get answersArray() {\n      return this.mcqForm.get('answers');\n    }\n    getCurrentMCQQuestion() {\n      return this.mcqQuestions[this.currentMCQIndex] || null;\n    }\n    getCurrentMCQOptions() {\n      const question = this.getCurrentMCQQuestion();\n      return question ? this.mcqOptionsMap[question.id] || [] : [];\n    }\n    selectSingleOption(option) {\n      const question = this.getCurrentMCQQuestion();\n      if (question) {\n        this.mcqAnswerStorage[question.id] = option;\n      }\n    }\n    toggleMultipleOption(option, event) {\n      const question = this.getCurrentMCQQuestion();\n      if (question) {\n        let currentAnswers = this.mcqAnswerStorage[question.id] || [];\n        if (event.target.checked) {\n          if (!currentAnswers.includes(option)) {\n            currentAnswers.push(option);\n          }\n        } else {\n          currentAnswers = currentAnswers.filter(ans => ans !== option);\n        }\n        this.mcqAnswerStorage[question.id] = currentAnswers;\n      }\n    }\n    clearCurrentMCQResponse() {\n      const question = this.getCurrentMCQQuestion();\n      if (question) {\n        delete this.mcqAnswerStorage[question.id];\n        // Clear form inputs\n        const inputs = document.querySelectorAll(`input[name=\"mcq_${question.id}\"]`);\n        inputs.forEach(input => input.checked = false);\n        const checkboxes = document.querySelectorAll('.option-item input[type=\"checkbox\"]');\n        checkboxes.forEach(checkbox => checkbox.checked = false);\n      }\n    }\n    getCurrentSubjectiveQuestion() {\n      return this.subjectiveAnswers[this.currentSubjectiveIndex] || null;\n    }\n    // Navigation methods for single question view\n    canNavigateMCQPrevious() {\n      return this.currentMCQIndex > 0;\n    }\n    canNavigateMCQNext() {\n      return this.currentMCQIndex < this.mcqQuestions.length - 1;\n    }\n    navigateMCQPrevious() {\n      if (this.canNavigateMCQPrevious()) {\n        this.currentMCQIndex--;\n      }\n    }\n    navigateMCQNext() {\n      if (this.canNavigateMCQNext()) {\n        this.currentMCQIndex++;\n      }\n    }\n    // Get total questions for current section\n    getTotalQuestionsForSection() {\n      switch (this.activeSection) {\n        case 'coding':\n          return this.codingQuestions.length;\n        case 'mcq':\n          return this.mcqQuestions.length;\n        case 'qa':\n          return 4;\n        // Fixed number of subjective questions\n        default:\n          return 0;\n      }\n    }\n    // Get current question index for active section\n    getCurrentQuestionIndex() {\n      switch (this.activeSection) {\n        case 'coding':\n          return this.currentCodingIndex;\n        case 'mcq':\n          return this.currentMCQIndex;\n        case 'qa':\n          return this.currentSubjectiveIndex;\n        default:\n          return 0;\n      }\n    }\n    // Get attempted questions count for active section (questions with actual answers)\n    getAttemptedCount() {\n      switch (this.activeSection) {\n        case 'coding':\n          return this.getCodingAttemptedCount();\n        case 'mcq':\n          return this.getMCQAttemptedCount();\n        case 'qa':\n          return this.getSubjectiveAttemptedCount();\n        default:\n          return 0;\n      }\n    }\n    getCodingAttemptedCount() {\n      let count = 0;\n      this.codingQuestions.forEach(question => {\n        const answer = this.codingAnswers[question.id];\n        // Count as attempted if user typed something different from starter code\n        if (answer && answer.trim() && answer.trim() !== (question.starterCode || '').trim()) {\n          count++;\n        }\n      });\n      return count;\n    }\n    getMCQAttemptedCount() {\n      let count = 0;\n      this.mcqQuestions.forEach(question => {\n        const answer = this.mcqAnswerStorage[question.id];\n        if (answer) {\n          if (question.multipleSelection) {\n            // For multiple selection, check if array has any items\n            if (Array.isArray(answer) && answer.length > 0) {\n              count++;\n            }\n          } else {\n            // For single selection, check if string is not empty\n            if (typeof answer === 'string' && answer.trim()) {\n              count++;\n            }\n          }\n        }\n      });\n      return count;\n    }\n    getSubjectiveAttemptedCount() {\n      // Count subjective answers that have actual text content\n      return this.subjectiveAnswers.filter(answer => answer.answer && answer.answer.trim().length > 0).length;\n    }\n    // Universal navigation methods\n    canNavigatePrevious() {\n      switch (this.activeSection) {\n        case 'coding':\n          return this.currentCodingIndex > 0;\n        case 'mcq':\n          return this.canNavigateMCQPrevious();\n        case 'qa':\n          return this.currentSubjectiveIndex > 0;\n        default:\n          return false;\n      }\n    }\n    canNavigateNext() {\n      switch (this.activeSection) {\n        case 'coding':\n          return this.currentCodingIndex < this.codingQuestions.length - 1;\n        case 'mcq':\n          return this.canNavigateMCQNext();\n        case 'qa':\n          return this.currentSubjectiveIndex < 3;\n        // 4 questions (0-3)\n        default:\n          return false;\n      }\n    }\n    navigatePreviousQuestion() {\n      switch (this.activeSection) {\n        case 'coding':\n          if (this.currentCodingIndex > 0) {\n            this.navigateCoding('prev');\n          }\n          break;\n        case 'mcq':\n          this.navigateMCQPrevious();\n          break;\n        case 'qa':\n          this.currentSubjectiveIndex = Math.max(0, this.currentSubjectiveIndex - 1);\n          break;\n      }\n    }\n    navigateNextQuestion() {\n      switch (this.activeSection) {\n        case 'coding':\n          if (this.currentCodingIndex < this.codingQuestions.length - 1) {\n            this.navigateCoding('next');\n          }\n          break;\n        case 'mcq':\n          this.navigateMCQNext();\n          break;\n        case 'qa':\n          this.currentSubjectiveIndex = Math.min(3, this.currentSubjectiveIndex + 1);\n          break;\n        // 4 questions (0-3)\n      }\n    }\n    goToQuestion(index) {\n      switch (this.activeSection) {\n        case 'coding':\n          if (index >= 0 && index < this.codingQuestions.length) {\n            this.currentCodingIndex = index;\n            const currentQuestion = this.codingQuestions[this.currentCodingIndex];\n            const savedAnswer = this.codingAnswers[currentQuestion.id];\n            this.codingForm.patchValue({\n              code: savedAnswer || currentQuestion.starterCode || ''\n            });\n          }\n          break;\n        case 'mcq':\n          if (index >= 0 && index < this.mcqQuestions.length) {\n            this.currentMCQIndex = index;\n          }\n          break;\n        case 'qa':\n          if (index >= 0 && index < 4) {\n            // 4 subjective questions\n            this.currentSubjectiveIndex = index;\n          }\n          break;\n      }\n    }\n    getQuestionNumbers() {\n      const total = this.getTotalQuestionsForSection();\n      return Array.from({\n        length: total\n      }, (_, i) => i);\n    }\n    static {\n      this.ɵfac = function InterviewTestPageComponent_Factory(t) {\n        return new (t || InterviewTestPageComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.InterviewService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: InterviewTestPageComponent,\n        selectors: [[\"app-interview-test-page\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 2,\n        vars: 2,\n        consts: [[\"class\", \"mettl-assessment\", 4, \"ngIf\"], [\"class\", \"loading-container\", 4, \"ngIf\"], [1, \"mettl-assessment\"], [1, \"mettl-header\"], [1, \"header-left\"], [1, \"logo-section\"], [1, \"assessment-title\"], [\"class\", \"candidate-info\", 4, \"ngIf\"], [1, \"header-right\"], [1, \"timer-section\"], [1, \"fas\", \"fa-clock\"], [1, \"question-navigation\"], [1, \"nav-btn\", \"prev-btn\", 3, \"click\", \"disabled\"], [1, \"fas\", \"fa-chevron-left\"], [1, \"question-counter\"], [1, \"nav-btn\", \"next-btn\", 3, \"click\", \"disabled\"], [1, \"fas\", \"fa-chevron-right\"], [1, \"section-navigation\"], [1, \"section-selector\"], [1, \"section-btn\", 3, \"click\"], [1, \"attempted-info\"], [1, \"question-container\"], [1, \"question-left\"], [\"class\", \"question-content\", 4, \"ngIf\"], [1, \"answer-right\"], [\"class\", \"answer-section\", 4, \"ngIf\"], [1, \"bottom-navigation\"], [1, \"nav-right\"], [1, \"submit-btn\", 3, \"click\", \"disabled\"], [\"class\", \"fas fa-paper-plane\", 4, \"ngIf\"], [\"class\", \"fas fa-spinner fa-spin\", 4, \"ngIf\"], [1, \"candidate-info\"], [1, \"question-content\"], [1, \"question-header\"], [\"class\", \"question-body\", 4, \"ngIf\"], [1, \"question-body\"], [1, \"question-text\"], [1, \"coding-input\", 3, \"formGroup\"], [\"formControlName\", \"code\", \"placeholder\", \"Write your code here...\", \"rows\", \"12\", 1, \"code-textarea\"], [3, \"answersUpdate\", \"domain\", \"resumeId\", \"currentQuestionIndex\"], [1, \"answer-section\"], [1, \"mcq-options\"], [1, \"options-list\"], [4, \"ngIf\"], [1, \"clear-response\"], [1, \"clear-btn\", 3, \"click\"], [1, \"fas\", \"fa-times\"], [\"class\", \"option-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"option-item\"], [\"type\", \"radio\", 3, \"change\", \"id\", \"name\", \"value\"], [3, \"for\"], [1, \"multiple-hint\"], [\"type\", \"checkbox\", 3, \"change\", \"id\", \"value\"], [1, \"fas\", \"fa-paper-plane\"], [1, \"fas\", \"fa-spinner\", \"fa-spin\"], [1, \"loading-container\"], [1, \"loading-content\"]],\n        template: function InterviewTestPageComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵtemplate(0, InterviewTestPageComponent_div_0_Template, 44, 22, \"div\", 0)(1, InterviewTestPageComponent_div_1_Template, 7, 0, \"div\", 1);\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n          }\n        },\n        dependencies: [CommonModule, i4.NgForOf, i4.NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, SubjectiveQAComponent],\n        styles: [\".mettl-assessment[_ngcontent-%COMP%]{display:flex;flex-direction:column;min-height:100vh;background-color:#f5f5f5;font-family:Segoe UI,Tahoma,Geneva,Verdana,sans-serif}.mettl-header[_ngcontent-%COMP%]{background:linear-gradient(135deg,#1e3c72,#2a5298);color:#fff;padding:12px 20px;display:flex;justify-content:space-between;align-items:center;box-shadow:0 2px 8px #00000026}.header-left[_ngcontent-%COMP%]{display:flex;align-items:center;gap:20px}.assessment-title[_ngcontent-%COMP%]{font-size:16px;font-weight:600}.candidate-info[_ngcontent-%COMP%]{font-size:14px;opacity:.9}.header-right[_ngcontent-%COMP%]{display:flex;align-items:center;gap:20px}.timer-section[_ngcontent-%COMP%]{background:#ffffff1a;padding:8px 16px;border-radius:20px;display:flex;align-items:center;gap:8px;font-size:14px;font-weight:500}.timer-section[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{color:gold}.question-navigation[_ngcontent-%COMP%]{display:flex;align-items:center;gap:12px}.nav-btn[_ngcontent-%COMP%]{display:flex;align-items:center;gap:6px;padding:6px 12px;background:#ffffff1a;border:1px solid rgba(255,255,255,.2);color:#fff;border-radius:4px;cursor:pointer;font-size:13px;transition:all .2s ease}.nav-btn[_ngcontent-%COMP%]:hover:not(:disabled){background:#fff3;border-color:#ffffff4d}.nav-btn[_ngcontent-%COMP%]:disabled{opacity:.5;cursor:not-allowed}.question-counter[_ngcontent-%COMP%]{font-size:13px;color:#ffffffe6;font-weight:500;padding:0 8px}.section-navigation[_ngcontent-%COMP%]{background:#fff;padding:15px 20px;border-bottom:1px solid #e0e0e0;display:flex;justify-content:space-between;align-items:center}.section-selector[_ngcontent-%COMP%]{display:flex;gap:10px}.section-btn[_ngcontent-%COMP%]{padding:8px 16px;background:#f8f9fa;border:1px solid #dee2e6;border-radius:4px;cursor:pointer;font-size:14px;transition:all .2s ease;color:#495057}.section-btn[_ngcontent-%COMP%]:hover{background:#e9ecef}.section-btn.active[_ngcontent-%COMP%]{background:#007bff;color:#fff;border-color:#007bff}.attempted-info[_ngcontent-%COMP%]{font-size:14px;color:#6c757d;font-weight:500}.question-container[_ngcontent-%COMP%]{display:flex;flex:1;min-height:0}.question-left[_ngcontent-%COMP%]{flex:1;background:#fff;border-right:1px solid #e0e0e0;display:flex;flex-direction:column}.question-content[_ngcontent-%COMP%]{padding:20px;flex:1;display:flex;flex-direction:column}.question-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px;padding-bottom:15px;border-bottom:1px solid #e9ecef}.question-header[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin:0;color:#333;font-size:18px;font-weight:600}.question-actions[_ngcontent-%COMP%]{display:flex;gap:10px}.action-btn[_ngcontent-%COMP%]{display:flex;align-items:center;gap:6px;padding:6px 12px;background:#fff;border:1px solid #007bff;color:#007bff;border-radius:4px;cursor:pointer;font-size:13px;transition:all .2s ease}.action-btn[_ngcontent-%COMP%]:hover{background:#007bff;color:#fff}.question-body[_ngcontent-%COMP%]{flex:1;display:flex;flex-direction:column}.question-body[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]{margin:0 0 15px;color:#333;font-size:16px;font-weight:600}.question-text[_ngcontent-%COMP%]{color:#555;line-height:1.6;margin-bottom:20px;font-size:14px}.coding-input[_ngcontent-%COMP%]{flex:1;display:flex;flex-direction:column}.coding-input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{margin-bottom:10px;font-weight:500;color:#333;font-size:14px}.code-textarea[_ngcontent-%COMP%]{flex:1;min-height:300px;border:1px solid #d1d3d4;border-radius:4px;padding:12px;font-family:Courier New,monospace;font-size:13px;line-height:1.4;resize:vertical;background:#fafafa}.code-textarea[_ngcontent-%COMP%]:focus{outline:none;border-color:#007bff;box-shadow:0 0 0 2px #007bff40}.answer-right[_ngcontent-%COMP%]{width:400px;background:#f8f9fa;padding:20px;display:flex;flex-direction:column}.answer-section[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]{margin:0 0 20px;color:#333;font-size:16px;font-weight:600}.mcq-options[_ngcontent-%COMP%]{flex:1}.options-list[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:12px}.option-item[_ngcontent-%COMP%]{display:flex;align-items:flex-start;gap:10px;padding:12px;background:#fff;border:1px solid #dee2e6;border-radius:6px;cursor:pointer;transition:all .2s ease}.option-item[_ngcontent-%COMP%]:hover{border-color:#007bff;background:#f8f9ff}.option-item[_ngcontent-%COMP%]   input[type=radio][_ngcontent-%COMP%], .option-item[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{margin:2px 0 0;cursor:pointer}.option-item[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{flex:1;cursor:pointer;line-height:1.4;font-size:14px;color:#333}.multiple-hint[_ngcontent-%COMP%]{margin-top:10px;font-size:12px;color:#6c757d;font-style:italic}.clear-response[_ngcontent-%COMP%]{margin-top:20px;padding-top:15px;border-top:1px solid #dee2e6}.clear-btn[_ngcontent-%COMP%]{display:flex;align-items:center;gap:6px;padding:8px 16px;background:#fff;border:1px solid #dc3545;color:#dc3545;border-radius:4px;cursor:pointer;font-size:13px;transition:all .2s ease}.clear-btn[_ngcontent-%COMP%]:hover{background:#dc3545;color:#fff}.bottom-navigation[_ngcontent-%COMP%]{background:#fff;padding:15px 20px;border-top:1px solid #e0e0e0;display:flex;justify-content:space-between;align-items:center;box-shadow:0 -2px 8px #0000001a}.nav-left[_ngcontent-%COMP%]{display:flex;align-items:center}.question-pagination[_ngcontent-%COMP%]{display:flex;align-items:center;gap:15px}.nav-arrow[_ngcontent-%COMP%]{width:32px;height:32px;border:1px solid #dee2e6;background:#fff;border-radius:4px;display:flex;align-items:center;justify-content:center;cursor:pointer;transition:all .2s ease}.nav-arrow[_ngcontent-%COMP%]:hover:not(:disabled){border-color:#007bff;color:#007bff}.nav-arrow[_ngcontent-%COMP%]:disabled{opacity:.4;cursor:not-allowed}.page-numbers[_ngcontent-%COMP%]{display:flex;gap:8px}.page-number[_ngcontent-%COMP%]{width:32px;height:32px;display:flex;align-items:center;justify-content:center;border:1px solid #dee2e6;background:#fff;border-radius:4px;cursor:pointer;font-size:14px;font-weight:500;transition:all .2s ease}.page-number[_ngcontent-%COMP%]:hover{border-color:#007bff;background:#f8f9ff}.page-number.active[_ngcontent-%COMP%]{background:#007bff;color:#fff;border-color:#007bff}.next-btn[_ngcontent-%COMP%]{padding:8px 20px;background:#007bff;color:#fff;border:none;border-radius:4px;cursor:pointer;font-size:14px;font-weight:500;transition:all .2s ease}.next-btn[_ngcontent-%COMP%]:hover:not(:disabled){background:#0056b3}.next-btn[_ngcontent-%COMP%]:disabled{background:#6c757d;cursor:not-allowed}.nav-right[_ngcontent-%COMP%]{display:flex;align-items:center}.submit-btn[_ngcontent-%COMP%]{padding:12px 24px;background:linear-gradient(135deg,#28a745,#20c997);color:#fff;border:none;border-radius:6px;cursor:pointer;font-size:14px;font-weight:600;display:flex;align-items:center;gap:8px;transition:all .3s ease;box-shadow:0 2px 8px #28a7454d}.submit-btn[_ngcontent-%COMP%]:hover:not(:disabled){background:linear-gradient(135deg,#218838,#1dc0a7);transform:translateY(-1px);box-shadow:0 4px 12px #28a74566}.submit-btn[_ngcontent-%COMP%]:disabled{background:#6c757d;cursor:not-allowed;transform:none;box-shadow:none}.loading-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:100vh;background-color:#f5f5f5}.loading-content[_ngcontent-%COMP%]{text-align:center;padding:40px;background:#fff;border-radius:12px;box-shadow:0 8px 24px #0000001a}.loading-content[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:3rem;color:#007bff;margin-bottom:20px}.loading-content[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{color:#333;margin-bottom:10px;font-size:24px}.loading-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{color:#666;margin:0}@media (max-width: 768px){.question-container[_ngcontent-%COMP%]{flex-direction:column}.answer-right[_ngcontent-%COMP%]{width:100%}.mettl-header[_ngcontent-%COMP%]{flex-direction:column;gap:10px;text-align:center}.section-navigation[_ngcontent-%COMP%]{flex-direction:column;gap:10px}.section-selector[_ngcontent-%COMP%]{flex-wrap:wrap;justify-content:center}.bottom-navigation[_ngcontent-%COMP%]{flex-direction:column;gap:15px}.question-pagination[_ngcontent-%COMP%]{flex-wrap:wrap;justify-content:center}}\"]\n      });\n    }\n  }\n  return InterviewTestPageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}